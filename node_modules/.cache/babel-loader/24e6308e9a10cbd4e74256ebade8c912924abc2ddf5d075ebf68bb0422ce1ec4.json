{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createCommand(type) {\n  return {\n    type\n  };\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_ANDROID_CHROME = CAN_USE_DOM && IS_ANDROID && IS_CHROME;\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction normalizeClassNames(...classNames) {\n  const rval = [];\n  for (const className of classNames) {\n    if (className && typeof className === 'string') {\n      for (const [s] of className.matchAll(/\\S+/g)) {\n        rval.push(s);\n      }\n    }\n  }\n  return rval;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction $handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            $handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = $getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction $flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet keyCounter = 1;\nfunction resetRandomKey() {\n  keyCounter = 1;\n}\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' &&\n  // @ts-ignore internal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n    if (editor != null) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    {\n      errorOnNodeKeyConstructorMismatch(node, existingKey);\n    }\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction errorOnNodeKeyConstructorMismatch(node, existingKey) {\n  const editorState = internalGetActiveEditorState();\n  if (!editorState) {\n    // tests expect to be able to do this kind of clone without an active editor state\n    return;\n  }\n  const existingNode = editorState._nodeMap.get(existingKey);\n  if (existingNode && existingNode.constructor !== node.constructor) {\n    // Lifted condition to if statement because the inverted logic is a bit confusing\n    if (node.constructor.name !== existingNode.constructor.name) {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with constructor ${existingNode.constructor.name}. Keys must not be re-used when the type is changed.`);\n      }\n    } else {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with different constructor with the same name (possibly due to invalid Hot Module Replacement). Keys must not be re-used when the type is changed.`);\n      }\n    }\n  }\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\n// TODO #6031 this function or their callers have to adjust selection (i.e. insertBefore)\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction $getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  // @ts-ignore We intentionally add this to the Node.\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = $getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  $flushRootMutations(editor);\n}\nfunction $getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() && !node.isComposing() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() && !node.isComposing() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(key, altKey, ctrlKey, metaKey) {\n  return key === 'Tab' && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'b' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'i' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'u' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(key, shiftKey) {\n  return isReturn(key) && !shiftKey;\n}\nfunction isLineBreak(key, shiftKey) {\n  return isReturn(key) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(key, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && key.toLowerCase() === 'o';\n}\nfunction isDeleteWordBackward(key, altKey, ctrlKey) {\n  return isBackspace(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(key, altKey, ctrlKey) {\n  return isDelete(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(key, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(key);\n}\nfunction isDeleteLineForward(key, metaKey) {\n  return IS_APPLE && metaKey && isDelete(key);\n}\nfunction isDeleteBackward(key, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(key) || key.toLowerCase() === 'h' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(key);\n}\nfunction isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(key) || key.toLowerCase() === 'd' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(key);\n}\nfunction isUndo(key, shiftKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'z' && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(key, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return key.toLowerCase() === 'z' && metaKey && shiftKey;\n  }\n  return key.toLowerCase() === 'y' && ctrlKey || key.toLowerCase() === 'z' && ctrlKey && shiftKey;\n}\nfunction isCopy(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'c') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'x') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(key) {\n  return key === 'ArrowLeft';\n}\nfunction isArrowRight(key) {\n  return key === 'ArrowRight';\n}\nfunction isArrowUp(key) {\n  return key === 'ArrowUp';\n}\nfunction isArrowDown(key) {\n  return key === 'ArrowDown';\n}\nfunction isMoveBackward(key, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(key, ctrlKey, altKey, metaKey) {\n  return isArrowRight(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(key, ctrlKey, metaKey) {\n  return isArrowUp(key) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(key, ctrlKey, metaKey) {\n  return isArrowDown(key) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(key) {\n  return key === ' ';\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(key) {\n  return key === 'Enter';\n}\nfunction isBackspace(key) {\n  return key === 'Backspace';\n}\nfunction isEscape(key) {\n  return key === 'Escape';\n}\nfunction isDelete(key) {\n  return key === 'Delete';\n}\nfunction isSelectAll(key, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'a' && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll() {\n  const root = $getRoot();\n  const selection = root.select(0, root.getChildrenSize());\n  $setSelection($normalizeSelection(selection));\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = normalizeClassNames(classNames);\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  // @ts-expect-error\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction $getNodeByKeyOrThrow(key) {\n  const node = $getNodeByKey(key);\n  if (node === null) {\n    {\n      throw Error(`Expected node with key ${key} to exist but it's not in the nodeMap.`);\n    }\n  }\n  return node;\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = normalizeClassNames(blockCursorTheme);\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is an inline node\n */\nfunction isInlineDomNode(node) {\n  const inlineNodes = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var|#text)$/, 'i');\n  return node.nodeName.match(inlineNodes) !== null;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is a block node\n */\nfunction isBlockDomNode(node) {\n  const blockNodes = new RegExp(/^(address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hr|li|main|nav|noscript|ol|p|pre|section|table|td|tfoot|ul|video)$/, 'i');\n  return node.nodeName.match(blockNodes) !== null;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isRootNode(node) || $isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet subTreeTextFormat = null;\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction $createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      $createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction $createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  $createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction $createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    $createNode(children[startIndex], dom, insertDOM);\n    const node = activeNextNodeMap.get(children[startIndex]);\n    if (node !== null && subTreeTextFormat === null && $isTextNode(node)) {\n      subTreeTextFormat = node.getFormat();\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        dom.removeChild(element);\n      }\n\n      // @ts-expect-error: internal field\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br');\n    // @ts-expect-error: internal field\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileParagraphFormat(element) {\n  if ($isParagraphNode(element) && subTreeTextFormat != null && subTreeTextFormat !== element.__textFormat && !activeEditorStateReadOnly) {\n    element.setTextFormat(subTreeTextFormat);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent;\n  // @ts-expect-error: internal field\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = normalizeClassNames(previousDirectionTheme);\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = normalizeClassNames(nextDirectionTheme);\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    // @ts-expect-error: internal field\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    // @ts-expect-error: internal field\n    dom.__lexicalDir = direction;\n  }\n}\nfunction $reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  subTreeTextFormat = null;\n  $reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  reconcileParagraphFormat(nextElement);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n  subTreeTextFormat = null;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction $reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      $reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = $createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n    const nextChildNode = activeNextNodeMap.get(nextFrstChildKey);\n    if (subTreeTextFormat === null && $isTextNode(nextChildNode)) {\n      subTreeTextFormat = nextChildNode.getFormat();\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        $createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction $reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n\n      // @ts-expect-error: internal field\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = $createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      $reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        $createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          $reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n    const node = activeNextNodeMap.get(nextKey);\n    if (node !== null && subTreeTextFormat === null && $isTextNode(node)) {\n      subTreeTextFormat = node.getFormat();\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    $createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction $reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  $reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  // @ts-ignore We intentionally add this to the Node.\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = null;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nconst rootElementsRegistered = new WeakMap();\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            const lastNode = anchor.getNode();\n            if (lastNode instanceof ParagraphNode && lastNode.getChildrenSize() === 0) {\n              selection.format = lastNode.getTextFormat();\n            } else {\n              selection.format = 0;\n            }\n            selection.style = '';\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Tripple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 'MediaLast' && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        const isSelectionAnchorSameAsFocus = selection.anchor.key === selection.focus.key;\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && isSelectionAnchorSameAsFocus) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          // Chromium Android at the moment seems to ignore the preventDefault\n          // on 'deleteContentBackward' and still deletes the content. Which leads\n          // to multiple deletions. So we let the browser handle the deletion in this case.\n          const selectedNodeText = selection.anchor.getNode().getTextContent();\n          const hasSelectedAllTextInNode = selection.anchor.offset === 0 && selection.focus.offset === selectedNodeText.length;\n          const shouldLetBrowserHandleDelete = IS_ANDROID_CHROME && isSelectionAnchorSameAsFocus && !hasSelectedAllTextInNode;\n          if (!shouldLetBrowserHandleDelete) {\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const isBackward = selection.isBackward();\n      const startOffset = isBackward ? selection.anchor.offset : selection.focus.offset;\n      const endOffset = isBackward ? selection.focus.offset : selection.anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, startOffset) + data + anchorNode.getTextContent().slice(startOffset + endOffset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction $onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      $onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.key;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    key,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (key == null) {\n    return;\n  }\n  if (isMoveForward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(key, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(key)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(key, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(key, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(key, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(key)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(key)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(key)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(key, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(key, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(key, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (documentRootElementsCount === undefined || documentRootElementsCount < 1) {\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered.set(doc, (documentRootElementsCount || 0) + 1);\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable() || eventName === 'click') {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      const isEditable = editor.isEditable();\n      switch (eventName) {\n        case 'cut':\n          return isEditable && dispatchCommand(editor, CUT_COMMAND, event);\n        case 'copy':\n          return dispatchCommand(editor, COPY_COMMAND, event);\n        case 'paste':\n          return isEditable && dispatchCommand(editor, PASTE_COMMAND, event);\n        case 'dragstart':\n          return isEditable && dispatchCommand(editor, DRAGSTART_COMMAND, event);\n        case 'dragover':\n          return isEditable && dispatchCommand(editor, DRAGOVER_COMMAND, event);\n        case 'dragend':\n          return isEditable && dispatchCommand(editor, DRAGEND_COMMAND, event);\n        case 'focus':\n          return isEditable && dispatchCommand(editor, FOCUS_COMMAND, event);\n        case 'blur':\n          {\n            return isEditable && dispatchCommand(editor, BLUR_COMMAND, event);\n          }\n        case 'drop':\n          return isEditable && dispatchCommand(editor, DROP_COMMAND, event);\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (!(documentRootElementsCount !== undefined)) {\n    throw Error(`Root element not registered`);\n  } // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const newCount = documentRootElementsCount - 1;\n  if (!(newCount >= 0)) {\n    throw Error(`Root element count less than 0`);\n  }\n  rootElementsRegistered.set(doc, newCount);\n  if (newCount === 0) {\n    doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n  }\n\n  // @ts-expect-error: internal field\n  const editor = rootElement.__lexicalEditor;\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    $removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */\n  //@ts-ignore We set the key in the constructor.\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    if ($isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element' && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) {\n      return false;\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!$isElementNode(node)) {\n          throw Error(`Children of root nodes must be elements`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      if (node === null) {\n        break;\n      }\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        } else {\n          break;\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const constructor = latestNode.constructor;\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      if ($isParagraphNode(latestNode) && $isParagraphNode(mutableNode)) {\n        mutableNode.__textFormat = latestNode.__textFormat;\n      }\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n\n    // @ts-expect-error\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    $removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) {\n      selection = selection.clone();\n    }\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    $removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChild(node)) {\n          return null;\n        }\n        return {\n          conversion: $convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction $convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChild(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n/** @noInheritDoc */\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: $convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!(element !== null && isHTMLElement(element))) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.toggleUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  const style = span.style;\n  return {\n    forChild: applyTextFormatFromStyle(style),\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: applyTextFormatFromStyle(b.style, hasNormalFontWeight ? undefined : 'bold'),\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction $convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && !isInlineDomNode(node) || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: applyTextFormatFromStyle(domNode.style, format),\n    node: null\n  };\n}\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\nfunction applyTextFormatFromStyle(style, shouldApply) {\n  const fontWeight = style.fontWeight;\n  const textDecoration = style.textDecoration.split(' ');\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = fontWeight === '700' || fontWeight === 'bold';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = textDecoration.includes('line-through');\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = textDecoration.includes('underline');\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = style.verticalAlign;\n  return lexicalNode => {\n    if (!$isTextNode(lexicalNode)) {\n      return lexicalNode;\n    }\n    if (hasBoldFontWeight && !lexicalNode.hasFormat('bold')) {\n      lexicalNode.toggleFormat('bold');\n    }\n    if (hasLinethroughTextDecoration && !lexicalNode.hasFormat('strikethrough')) {\n      lexicalNode.toggleFormat('strikethrough');\n    }\n    if (hasItalicFontStyle && !lexicalNode.hasFormat('italic')) {\n      lexicalNode.toggleFormat('italic');\n    }\n    if (hasUnderlineTextDecoration && !lexicalNode.hasFormat('underline')) {\n      lexicalNode.toggleFormat('underline');\n    }\n    if (verticalAlign === 'sub' && !lexicalNode.hasFormat('subscript')) {\n      lexicalNode.toggleFormat('subscript');\n    }\n    if (verticalAlign === 'super' && !lexicalNode.hasFormat('superscript')) {\n      lexicalNode.toggleFormat('superscript');\n    }\n    if (shouldApply && !lexicalNode.hasFormat(shouldApply)) {\n      lexicalNode.toggleFormat(shouldApply);\n    }\n    return lexicalNode;\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    const newNode = new TabNode(node.__key);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    newNode.__text = node.__text;\n    newNode.__format = node.__format;\n    newNode.__style = node.__style;\n    return newNode;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tab',\n      version: 1\n    };\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = $internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection as a new\n   * Lexical TextNode, according to a series of insertion heuristics based on the selection type and position.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const format = this.format;\n    const style = this.style;\n    let firstPoint = anchor;\n    let endPoint = focus;\n    if (!this.isCollapsed() && focus.isBefore(anchor)) {\n      firstPoint = focus;\n      endPoint = anchor;\n    }\n    if (firstPoint.type === 'element') {\n      $transferStartingElementPointToTextPoint(firstPoint, endPoint, format, style);\n    }\n    const startOffset = firstPoint.offset;\n    let endOffset = endPoint.offset;\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (selectedNodesLength === 1 && endPoint.type === 'element') {\n      endOffset = firstNodeTextLength;\n      endPoint.set(firstPoint.key, endOffset, 'text');\n    }\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        nextSibling.setStyle(style);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        $normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    this.insertText('');\n  }\n\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   */\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected or it is token, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize() && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n      textNode.setFormat(nextFormat);\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accomodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstBlock = $getAncestor(firstPoint.getNode(), INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ('__language' in firstBlock && $isElementNode(firstBlock)) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = $removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      const index = $removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isLI = node => '__value' in node && '__checked' in node;\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || isLI(firstBlock));\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (isLI(insertedParagraph) || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = $removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be an ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  /**\n   * Helper for handling forward character and word deletion that prevents element nodes\n   * like a table, columns layout being destroyed\n   *\n   * @param anchor the anchor\n   * @param anchorNode the anchor node in the selection\n   * @param isBackward whether or not selection is backwards\n   */\n  forwardDeletion(anchor, anchorNode, isBackward) {\n    if (!isBackward && (\n    // Delete forward handle case\n    anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n      const parent = anchorNode.getParent();\n      const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n      if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      let anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n\n      // Handle the deletion around decorators.\n      const focus = this.focus;\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      // Since `domSelection.modify('extend', ..., 'lineboundary')` works well for text selections\n      // but doesn't properly handle selections which end on elements, a space character is added\n      // for such selections transforming their anchor's type to 'text'\n      const anchorIsElement = this.anchor.type === 'element';\n      if (anchorIsElement) {\n        this.insertText(' ');\n      }\n      this.modify('extend', isBackward, 'lineboundary');\n\n      // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n\n      // Adjusts selection to include an extra character added for element anchors to remove it\n      if (anchorIsElement) {\n        const startPoint = isBackward ? this.anchor : this.focus;\n        startPoint.set(startPoint.key, startPoint.offset + 1, startPoint.type);\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction $internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    const blockCursorElement = editor._blockCursorElement;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (blockCursorElement !== null) {\n      const blockCursorElementParent = blockCursorElement.parentNode;\n      if (dom === blockCursorElementParent) {\n        const blockCursorOffset = Array.prototype.indexOf.call(blockCursorElementParent.children, blockCursorElement);\n        if (offset > blockCursorOffset) {\n          resolvedOffset--;\n        }\n      }\n    }\n    resolvedNode = $getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = $getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        resolvedOffset = Math.min(resolvedElement.getChildrenSize(), resolvedOffset);\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n          resolvedOffset = 0;\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && $getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = $getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction $normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = $internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = $internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = $getNodeFromDOM(anchorDOM);\n    const focusNode = $getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  $normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction $internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction $internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return $internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction $createRangeSelectionFromDom(domSelection, editor) {\n  return $internalCreateRangeSelection(null, domSelection, editor, null);\n}\nfunction $internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n    {\n      console.warn(error);\n    }\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction $removeTextAndSplitBlock(selection) {\n  let selection_ = selection;\n  if (!selection.isCollapsed()) {\n    selection_.removeText();\n  }\n  // A new selection can originate as a result of node replacement, in which case is registered via\n  // $setSelection\n  const newSelection = $getSelection();\n  if ($isRangeSelection(newSelection)) {\n    selection_ = newSelection;\n  }\n  if (!$isRangeSelection(selection_)) {\n    throw Error(`Unexpected dirty selection to be null`);\n  }\n  const anchor = selection_.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = $splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction $splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction internalGetActiveEditorState() {\n  return activeEditorState;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction $commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = $reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        $commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  $triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction $triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      $beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction $beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = $internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    $commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      $commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        $commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    $beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while ($isElementNode(node)) {\n      const child = node.getFirstChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while ($isElementNode(node)) {\n      const child = node.getLastChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  /** @deprecated @internal */\n  canReplaceWith(replacement) {\n    return true;\n  }\n  /** @deprecated @internal */\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  /** @deprecated @internal */\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...nodesToAppend);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// TODO: Cleanup ArtificialNode__DO_NOT_USE #5966\nclass ArtificialNode__DO_NOT_USE extends ElementNode {\n  static getType() {\n    return 'artificial';\n  }\n  createDOM(config) {\n    // this isnt supposed to be used and is not used anywhere but defining it to appease the API\n    const dom = document.createElement('div');\n    return dom;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__textFormat = 0;\n  }\n  static getType() {\n    return 'paragraph';\n  }\n  getTextFormat() {\n    const self = this.getLatest();\n    return self.__textFormat;\n  }\n  setTextFormat(type) {\n    const self = this.getWritable();\n    self.__textFormat = type;\n    return self;\n  }\n  hasTextFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getTextFormat() & formatFlag) !== 0;\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: $convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    node.setTextFormat(serializedNode.textFormat);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      textFormat: this.getTextFormat(),\n      type: 'paragraph',\n      version: 1\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(rangeSelection, restoreSelection) {\n    const newElement = $createParagraphNode();\n    newElement.setTextFormat(rangeSelection.format);\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    newElement.setFormat(this.getFormatType());\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction $convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM.call(node.klass);\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ArtificialNode__DO_NOT_USE, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods and replaceWithKlass is instance of base klass.\n      {\n        // ArtificialNode__DO_NOT_USE can get renamed, so we use the type\n        const nodeType = Object.prototype.hasOwnProperty.call(klass, 'getType') && klass.getType();\n        const name = klass.name;\n        if (replaceWithKlass) {\n          if (!(replaceWithKlass.prototype instanceof klass)) {\n            throw Error(`${replaceWithKlass.name} doesn't extend the ${name}`);\n          }\n        }\n        if (name !== 'RootNode' && nodeType !== 'root' && nodeType !== 'artificial') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener) {\n    let registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    let klassToMutate = klass;\n    let replaceKlass = null;\n    while (replaceKlass = registeredNode.replaceWithKlass) {\n      klassToMutate = replaceKlass;\n      registeredNode = this._nodes.get(replaceKlass.getType());\n      if (registeredNode === undefined) {\n        {\n          throw Error(`Node ${replaceKlass.name} has not been registered. Ensure node has been passed to createEditor.`);\n        }\n      }\n    }\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klassToMutate);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const type = klass.getType();\n    const registeredNode = this._nodes.get(type);\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        $commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    $flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      $commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    $commitPendingUpdates(this);\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\nexport { $addUpdateTag, $applyNodeReplacement, $copyNode, $createLineBreakNode, $createNodeSelection, $createParagraphNode, $createPoint, $createRangeSelection, $createRangeSelectionFromDom, $createTabNode, $createTextNode, $getAdjacentNode, $getCharacterOffsets, $getEditor, $getNearestNodeFromDOMNode, $getNearestRootOrShadowRoot, $getNodeByKey, $getNodeByKeyOrThrow, $getPreviousSelection, $getRoot, $getSelection, $getTextContent, $hasAncestor, $hasUpdateTag, $insertNodes, $isBlockElementNode, $isDecoratorNode, $isElementNode, $isInlineElementOrDecoratorNode, $isLeafNode, $isLineBreakNode, $isNodeSelection, $isParagraphNode, $isRangeSelection, $isRootNode, $isRootOrShadowRoot, $isTabNode, $isTextNode, $nodesOfType, $normalizeSelection as $normalizeSelection__EXPERIMENTAL, $parseSerializedNode, $selectAll, $setCompositionKey, $setSelection, $splitNode, ArtificialNode__DO_NOT_USE, BLUR_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CLICK_COMMAND, COMMAND_PRIORITY_CRITICAL, COMMAND_PRIORITY_EDITOR, COMMAND_PRIORITY_HIGH, COMMAND_PRIORITY_LOW, COMMAND_PRIORITY_NORMAL, CONTROLLED_TEXT_INSERTION_COMMAND, COPY_COMMAND, CUT_COMMAND, DELETE_CHARACTER_COMMAND, DELETE_LINE_COMMAND, DELETE_WORD_COMMAND, DRAGEND_COMMAND, DRAGOVER_COMMAND, DRAGSTART_COMMAND, DROP_COMMAND, DecoratorNode, ElementNode, FOCUS_COMMAND, FORMAT_ELEMENT_COMMAND, FORMAT_TEXT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, IS_ALL_FORMATTING, IS_BOLD, IS_CODE, IS_HIGHLIGHT, IS_ITALIC, IS_STRIKETHROUGH, IS_SUBSCRIPT, IS_SUPERSCRIPT, IS_UNDERLINE, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_ARROW_UP_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, KEY_DOWN_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, KEY_MODIFIER_COMMAND, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, LineBreakNode, MOVE_TO_END, MOVE_TO_START, OUTDENT_CONTENT_COMMAND, PASTE_COMMAND, ParagraphNode, REDO_COMMAND, REMOVE_TEXT_COMMAND, RootNode, SELECTION_CHANGE_COMMAND, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, SELECT_ALL_COMMAND, TEXT_TYPE_TO_FORMAT, TabNode, TextNode, UNDO_COMMAND, createCommand, createEditor, getNearestEditorFromDOMNode, isBlockDomNode, isCurrentlyReadOnlyMode, isHTMLAnchorElement, isHTMLElement, isInlineDomNode, isSelectionCapturedInDecoratorInput, isSelectionWithinEditor, resetRandomKey };","map":{"version":3,"names":["createCommand","type","SELECTION_CHANGE_COMMAND","SELECTION_INSERT_CLIPBOARD_NODES_COMMAND","CLICK_COMMAND","DELETE_CHARACTER_COMMAND","INSERT_LINE_BREAK_COMMAND","INSERT_PARAGRAPH_COMMAND","CONTROLLED_TEXT_INSERTION_COMMAND","PASTE_COMMAND","REMOVE_TEXT_COMMAND","DELETE_WORD_COMMAND","DELETE_LINE_COMMAND","FORMAT_TEXT_COMMAND","UNDO_COMMAND","REDO_COMMAND","KEY_DOWN_COMMAND","KEY_ARROW_RIGHT_COMMAND","MOVE_TO_END","KEY_ARROW_LEFT_COMMAND","MOVE_TO_START","KEY_ARROW_UP_COMMAND","KEY_ARROW_DOWN_COMMAND","KEY_ENTER_COMMAND","KEY_SPACE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ESCAPE_COMMAND","KEY_DELETE_COMMAND","KEY_TAB_COMMAND","INSERT_TAB_COMMAND","INDENT_CONTENT_COMMAND","OUTDENT_CONTENT_COMMAND","DROP_COMMAND","FORMAT_ELEMENT_COMMAND","DRAGSTART_COMMAND","DRAGOVER_COMMAND","DRAGEND_COMMAND","COPY_COMMAND","CUT_COMMAND","SELECT_ALL_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","CAN_REDO_COMMAND","CAN_UNDO_COMMAND","FOCUS_COMMAND","BLUR_COMMAND","KEY_MODIFIER_COMMAND","CAN_USE_DOM","window","document","createElement","documentMode","IS_APPLE","test","navigator","platform","IS_FIREFOX","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_ANDROID","IS_CHROME","IS_ANDROID_CHROME","IS_APPLE_WEBKIT","DOM_ELEMENT_TYPE","DOM_TEXT_TYPE","NO_DIRTY_NODES","HAS_DIRTY_NODES","FULL_RECONCILE","IS_NORMAL","IS_TOKEN","IS_SEGMENTED","IS_BOLD","IS_ITALIC","IS_STRIKETHROUGH","IS_UNDERLINE","IS_CODE","IS_SUBSCRIPT","IS_SUPERSCRIPT","IS_HIGHLIGHT","IS_ALL_FORMATTING","IS_DIRECTIONLESS","IS_UNMERGEABLE","IS_ALIGN_LEFT","IS_ALIGN_CENTER","IS_ALIGN_RIGHT","IS_ALIGN_JUSTIFY","IS_ALIGN_START","IS_ALIGN_END","NON_BREAKING_SPACE","ZERO_WIDTH_SPACE","COMPOSITION_SUFFIX","DOUBLE_LINE_BREAK","COMPOSITION_START_CHAR","RTL","LTR","RTL_REGEX","RegExp","LTR_REGEX","TEXT_TYPE_TO_FORMAT","bold","code","highlight","italic","strikethrough","subscript","superscript","underline","DETAIL_TYPE_TO_DETAIL","directionless","unmergeable","ELEMENT_TYPE_TO_FORMAT","center","end","justify","left","right","start","ELEMENT_FORMAT_TO_TYPE","TEXT_MODE_TO_TYPE","normal","segmented","token","TEXT_TYPE_TO_MODE","normalizeClassNames","classNames","rval","className","s","matchAll","push","TEXT_MUTATION_VARIANCE","isProcessingMutations","lastTextEntryTimeStamp","getIsProcessingMutations","updateTimeStamp","event","timeStamp","initTextEntryListener","editor","getWindow","addEventListener","isManagedLineBreak","dom","target","__lexicalLineBreak","_key","undefined","getLastSelection","getEditorState","read","selection","$getSelection","clone","$handleTextMutation","node","domSelection","getDOMSelection","_window","anchorOffset","focusOffset","anchorNode","text","nodeValue","$updateTextNodeFromDOMContent","shouldUpdateTextNodeFromMutation","targetDOM","targetNode","$isRangeSelection","anchor","getNode","is","format","getFormat","nodeType","isAttached","$flushMutations$1","mutations","observer","shouldFlushTextMutations","performance","now","updateEditor","badDOMTargets","Map","rootElement","getRootElement","currentEditorState","_editorState","blockCursorElement","_blockCursorElement","shouldRevertSelection","possibleTextForFirefoxPaste","i","length","mutation","$getNearestNodeFromDOMNode","$isDecoratorNode","$isTextNode","addedDOMs","addedNodes","addedDOM","$getNodeFromDOMNode","parentDOM","parentNode","nodeName","possibleText","innerText","removeChild","removedDOMs","removedNodes","removedDOMsLength","unremovedBRs","removedDOM","appendChild","internalGetRoot","set","size","$isElementNode","childKeys","getChildrenKeys","currentDOM","firstChild","key","correctDOM","getElementByKey","replaceChild","nextSibling","markDirty","records","takeRecords","record","dirty","$setSelection","isFirefoxClipboardEvents","insertRawText","$flushRootMutations","_observer","initMutationObserver","MutationObserver","$canSimpleTextNodesBeMerged","node1","node2","node1Mode","__mode","node1Format","__format","node1Style","__style","node2Mode","node2Format","node2Style","$mergeTextNodes","writableNode1","mergeWithSibling","normalizedNodes","getActiveEditor","_normalizedNodes","add","__key","$normalizeTextNode","textNode","__text","isSimpleText","isUnmergeable","remove","previousNode","getPreviousSibling","nextNode","getNextSibling","$normalizeSelection","$normalizePoint","focus","point","offset","nextOffsetAtEnd","getChildrenSize","getChildAtIndex","getTextContentSize","keyCounter","resetRandomKey","generateRandomKey","getRegisteredNodeOrThrow","registeredNode","_nodes","get","Error","scheduleMicroTask","queueMicrotask","fn","Promise","resolve","then","$isSelectionCapturedInDecorator","isSelectionCapturedInDecoratorInput","anchorDOM","activeElement","contentEditable","__lexicalEditor","isSelectionWithinEditor","focusDOM","contains","getNearestEditorFromDOMNode","error","currentNode","getParentElement","getTextDirection","$isTokenOrSegmented","isToken","isSegmented","isDOMNodeLexicalTextNode","getDOMTextNode","element","toggleTextFormatType","alignWithFormat","activeFormat","newFormat","$isLeafNode","$isLineBreakNode","$setNodeKey","existingKey","errorOnNodeKeyConstructorMismatch","errorOnReadOnly","errorOnInfiniteTransforms","editorState","getActiveEditorState","_nodeMap","_dirtyElements","_dirtyLeaves","_cloneNotNeeded","_dirtyType","internalGetActiveEditorState","existingNode","constructor","name","internalMarkParentElementsAsDirty","parentKey","nodeMap","dirtyElements","nextParentKey","has","__parent","removeFromParent","oldParent","getParent","writableNode","getWritable","writableParent","prevSibling","writableNextSibling","__first","__prev","writablePrevSibling","__next","__last","__size","internalMarkNodeAsDirty","latest","getLatest","parent","internalMarkSiblingsAsDirty","$setCompositionKey","compositionKey","previousCompositionKey","_compositionKey","$getNodeByKey","$getCompositionKey","isCurrentlyReadOnlyMode","startingDOM","cloneDecorators","currentDecorators","_decorators","pendingDecorators","Object","assign","_pendingDecorators","getEditorStateTextContent","$getRoot","getTextContent","markAllNodesAsDirty","isEmpty","_pendingEditorState","tag","isFrozen","setCachedNodes","_selection","$flushMutations","$getNodeFromDOM","nodeKey","getNodeKeyFromDOM","getTextNodeOffset","moveSelectionToEnd","doesContainGrapheme","str","getEditorsToPropagate","editorsToPropagate","currentEditor","_parentEditor","createUID","Math","random","toString","replace","substr","getAnchorTextFromDOM","$updateSelectedTextFromDOM","isCompositionEnd","data","textContent","compositionEnd","isDirty","isComposing","normalizedTextContent","slice","prevTextContent","setTimeout","update","prevSelection","$getPreviousSelection","prevTextContentSize","getKey","canInsertTextBefore","canInsertTextAfter","setTextContent","setTextNodeRange","originalTextContent","replacement","$createTextNode","$previousSiblingDoesNotAcceptText","previousSibling","isInline","$shouldInsertTextAfterOrBeforeTextNode","isCollapsed","getParentOrThrow","isTab","altKey","ctrlKey","metaKey","isBold","toLowerCase","controlOrMeta","isItalic","isUnderline","isParagraph","shiftKey","isReturn","isLineBreak","isOpenLineBreak","isDeleteWordBackward","isBackspace","isDeleteWordForward","isDelete","isDeleteLineBackward","isDeleteLineForward","isDeleteBackward","isDeleteForward","isUndo","isRedo","isCopy","isCut","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","isMoveBackward","isMoveToStart","isMoveForward","isMoveToEnd","isMoveUp","isMoveDown","isModifier","isSpace","isEscape","isSelectAll","$selectAll","root","select","getCachedClassNameArray","classNamesTheme","classNameThemeType","__lexicalClassNameCache","classNamesCache","cachedClassNames","classNamesArr","setMutatedNode","mutatedNodes","registeredNodes","mutationListeners","__type","klass","mutatedNodesByType","prevMutation","isMove","$nodesOfType","readOnly","_readOnly","klassType","getType","nodes","nodesOfType","resolveElement","isBackward","block","getIndexWithinParent","$getAdjacentNode","focusNode","possibleNode","inputType","dispatchCommand","command","payload","triggerCommandListeners","$textContentRequiresDoubleLinebreakAtEnd","$isRootNode","isLastChild","getElementByKeyOrThrow","_keyToDOMMap","parentElement","assignedSlot","host","scrollIntoViewIfNeeded","selectionRect","doc","ownerDocument","defaultView","top","currentTop","bottom","currentBottom","targetTop","targetBottom","isBodyElement","body","innerHeight","targetRect","getBoundingClientRect","diff","scrollBy","scrollTop","yOffset","$hasUpdateTag","_updateTags","$addUpdateTag","$maybeMoveChildrenSelectionToParent","$hasAncestor","child","getDefaultView","domElem","ownerDoc","windowObj","$isInlineElementOrDecoratorNode","$getNearestRootOrShadowRoot","$isRootOrShadowRoot","isShadowRoot","$copyNode","copy","$applyNodeReplacement","replaceFunc","replacementNode","errorOnInsertTextNodeOnRoot","insertNode","$getNodeByKeyOrThrow","createBlockCursorElement","editorConfig","theme","setAttribute","blockCursorTheme","blockCursor","classList","needsBlockCursor","canBeEmpty","removeDOMBlockCursorElement","style","removeProperty","updateDOMBlockCursorElement","nextSelection","elementNode","elementNodeSize","isBlockCursor","insertBeforeElement","sibling","elementDOM","_config","caretColor","insertBefore","targetWindow","getSelection","$splitNode","startNode","recurse","isParentRoot","nodeToMove","insertAfter","leftTree","rightTree","newParent","nextSiblings","getNextSiblings","append","isHTMLAnchorElement","x","isHTMLElement","tagName","isInlineDomNode","inlineNodes","match","isBlockDomNode","blockNodes","INTERNAL_$isBlock","getFirstChild","isLeafElement","$getAncestor","predicate","$getEditor","$garbageCollectDetachedDecorators","pendingEditorState","decorators","$garbageCollectDetachedDeepChildNodes","prevNodeMap","nodeMapDelete","dirtyNodes","childKey","delete","$garbageCollectDetachedNodes","prevEditorState","dirtyLeaves","subTreeTextContent","subTreeDirectionedTextContent","subTreeTextFormat","editorTextContent","activeEditorConfig","activeEditor$1","activeEditorNodes","treatAllNodesAsDirty","activeEditorStateReadOnly","activeMutationListeners","activeTextDirection","activeDirtyElements","activeDirtyLeaves","activePrevNodeMap","activeNextNodeMap","activePrevKeyToDOMMap","destroyNode","getPrevElementByKeyOrThrow","children","createChildrenArray","destroyChildren","_startIndex","endIndex","startIndex","setTextAlign","domStyle","value","setProperty","DEFAULT_INDENT_VALUE","setElementIndent","indent","indentClassName","elementHasClassName","indentationBaseValue","getComputedStyle","getPropertyValue","setElementFormat","$createNode","insertDOM","createDOM","storeDOMWithKey","__indent","childrenSize","$createChildrenWithDirection","reconcileElementTerminatingLineBreak","decorator","decorate","reconcileDecorator","isDirectionless","possibleLineBreak","freeze","previousSubTreeDirectionedTextContent","$createChildren","reconcileBlockDirection","previousSubTreeTextContent","__lexicalTextContent","isLastChildLineBreakOrDecorator","prevElement","nextElement","prevLineBreak","nextLineBreak","reconcileParagraphFormat","$isParagraphNode","__textFormat","setTextFormat","previousSubTreeDirectionTextContent","__lexicalDirTextContent","previousDirection","__lexicalDir","hasEmptyDirectionedTextContent","direction","previousDirectionTheme","nextDirectionTheme","removeAttribute","dir","__dir","$reconcileChildrenWithDirection","$reconcileChildren","prevChildrenSize","nextChildrenSize","prevFirstChildKey","nextFrstChildKey","$reconcileNode","lastDOM","replacementDOM","nextChildNode","prevChildren","nextChildren","lexicalLineBreak","canUseFastPath","$reconcileNodeChildren","prevNode","updateDOM","nextIndent","nextFormat","__cachedText","nextRootNode","prevChildrenLength","nextChildrenLength","prevEndIndex","nextEndIndex","prevChildrenSet","nextChildrenSet","siblingDOM","prevIndex","nextIndex","prevKey","nextKey","Set","nextHasPrevKey","prevHasNextKey","childDOM","appendNewChildren","removeOldChildren","$reconcileRoot","nextEditorState","dirtyType","_listeners","currentMutatedNodes","keyToDOMMap","PASS_THROUGH_COMMAND","ANDROID_COMPOSITION_LATENCY","rootElementEvents","onKeyDown","onPointerDown","onCompositionStart","onCompositionEnd","onInput","onClick","onBeforeInput","lastKeyDownTimeStamp","lastKeyCode","lastBeforeInputInsertTextTimeStamp","unprocessedBeforeInputData","rootElementsRegistered","WeakMap","isSelectionChangeFromDOMUpdate","isSelectionChangeFromMouseDown","isInsertLineBreak","isFirefoxEndingComposition","collapsedSelectionFormat","$shouldPreventDefaultAndInsertText","domTargetRange","isBeforeInput","domAnchorNode","anchorKey","backingAnchorElement","textLength","collapsed","startContainer","startOffset","getStyle","shouldSkipSelectionChange","domNode","onSelectionChange","isActive","windowEvent","currentTimeStamp","lastFormat","lastStyle","lastOffset","lastKey","isRootTextContentEmpty","lastNode","ParagraphNode","getTextFormat","focusKey","getNodes","nodesLength","endOffset","startKey","endKey","combinedFormat","hasTextNodes","textContentSize","lastSelection","getTopLevelElementOrThrow","removeAllRanges","detail","pointerType","newSelection","$internalCreateRangeSelection","Node","getTargetRange","getTargetRanges","targetRanges","$canRemoveText","isPossiblyAndroidKeyPress","targetRange","isSelectionAnchorSameAsFocus","preventDefault","selectedNodeText","hasSelectedAllTextInNode","shouldLetBrowserHandleDelete","applyDOMRange","dataTransfer","getData","stopPropagation","$onCompositionEndImpl","characterData","$isNodeSelection","getRootElementRemoveHandles","eventHandles","__lexicalEventHandles","activeNestedEditorsMap","onDocumentSelectionChange","nextActiveEditor","editors","rootEditor","rootEditorKey","activeNestedEditor","prevActiveEditor","stopLexicalPropagation","_lexicalHandled","hasStoppedLexicalPropagation","stopped","addRootElementEvents","documentRootElementsCount","removeHandles","eventName","onEvent","eventHandler","isEditable","removeEventListener","removeRootElementEvents","newCount","cleanActiveNestedEditorsMap","markSelectionChangeFromDOMUpdate","markCollapsedSelectionFormat","$removeNode","nodeToRemove","restoreSelection","preserveEmptyParent","selectionMoved","moveSelectionPointToSibling","isSelected","selectPrevious","index","$updateElementSelectionOnCreateDeleteNode","selectEnd","LexicalNode","_data","errorOnTypeKlassMismatch","targetSelection","some","n","getTopLevelElement","getParents","parents","getParentKeys","self","getPreviousSiblings","siblings","getCommonAncestor","a","b","unshift","aLength","bLength","bSet","ancestor","object","isBefore","isParentOf","commonAncestor","indexA","indexB","getNodesBetween","visited","getLastChild","parentSibling","reverse","latestNode","cloneNotNeeded","mutableNode","__detail","_editor","_prevNode","_dom","exportDOM","exportJSON","importJSON","_serializedNode","transform","replaceWith","includeChildren","toReplaceKey","writableReplaceWith","getChildren","forEach","$moveSelectionPointToEnd","nodeToInsert","writableSelf","writableNodeToInsert","elementAnchorSelectionOnNode","elementFocusSelectionOnNode","oldIndex","oldParentKey","insertKey","writableParentKey","isParentRequired","createParentElementNode","$createParagraphNode","selectStart","selectNext","editorKlass","insertRangeAfter","firstToInsert","lastToInsert","lastToInsert2","current","nodesToInsert","LineBreakNode","importDOM","br","isOnlyChild","conversion","$convertLineBreakElement","priority","serializedLineBreakNode","$createLineBreakNode","version","isWhitespaceDomTextNode","lastChild","getElementOuterTag","getElementInnerTag","setTextThemeClassNames","prevFormat","textClassNames","domClassList","hasUnderlineStrikethrough","prevUnderlineStrikethrough","nextUnderlineStrikethrough","flag","diffComposedText","nextText","suffix","insert","deleteData","insertData","createTextInnerDOM","innerDOM","innerTag","config","wrapElementWith","el","TextNode","getDetail","getMode","hasFormat","formatFlag","getFormatFlags","canHaveFormat","outerTag","cssText","prevOuterTag","nextOuterTag","prevInnerTag","nextInnerTag","prevTag","nextTag","prevInnerDOM","nextInnerDOM","prevStyle","nextStyle","#text","$convertTextDOMNode","convertBringAttentionToElement","convertTextFormatElement","em","span","convertSpanElement","strong","sub","sup","u","serializedNode","setFormat","setDetail","setMode","mode","setStyle","whiteSpace","selectionTransform","toggleFormat","toggleDirectionless","toggleUnmergeable","_anchorOffset","_focusOffset","$internalMakeRangeSelection","spliceText","delCount","newText","moveSelection","handledTextLength","newOffset","updatedText","splitText","splitOffsets","offsetsSet","parts","string","partsLength","firstPart","hasReplacedSelf","splitNodes","textSize","part","partSize","siblingKey","nextTextSize","insertionIndex","splice","targetKey","adjustPointOffsetForMergedSibling","targetText","isTextEntity","forChild","applyTextFormatFromStyle","hasNormalFontWeight","fontWeight","preParentCache","isNodePre","startsWith","findParentPreDOMNode","cached","resultNode","domNode_","parentDom","split","$createTabNode","previousText","isStartOfLine","findTextInLine","previousTextContent","isEndOfLine","nextTextContent","forward","display","descendant","nodeNameToTextFormat","shouldApply","textDecoration","hasBoldFontWeight","hasLinethroughTextDecoration","includes","hasItalicFontStyle","fontStyle","hasUnderlineTextDecoration","verticalAlign","lexicalNode","TabNode","newNode","serializedTabNode","_text","_detail","_type","$isTabNode","Point","aNode","bNode","aOffset","bOffset","aNodeDescendant","getDescendantByIndex","bNodeDescendant","oldKey","$createPoint","selectPointOnNode","textContentLength","getLastDescendant","$transferStartingElementPointToTextPoint","placementNode","$setPointValues","NodeSelection","objects","_cachedNodes","getCachedNodes","Array","from","every","getStartEndPoints","clear","extract","insertText","insertNodes","selectedNodes","selectedNodesLength","lastSelectedNode","selectionAtEnd","cachedNodes","RangeSelection","firstPoint","lastPoint","firstNode","firstNodeDescendant","lastNodeDescendant","$getCharacterOffsets","prevWasElement","range","resolvedSelectionPoints","$internalResolveSelectionPoints","endContainer","anchorPoint","focusPoint","endPoint","firstNodeText","firstNodeTextLength","firstNodeParent","lastIndex","lastNodeParent","$normalizeSelectionPointsForBoundaries","firstNodeFormat","firstNodeStyle","markedNodeKeysForKeep","firstElement","lastElement","lastElementChild","lastNodeChildren","selectedNodesSet","firstAndLastElementsAreEqual","insertionTarget","lastNodeChild","lastRemovedParent","childrenLength","selectedNode","removeText","formatText","formatType","selectedTextNodes","selectedTextNodesLength","startPoint","firstIndex","firstNextFormat","lastNextFormat","insertParagraph","firstBlock","last","$removeTextAndSplitBlock","notInline","blocksParent","$wrapInlineNodes","nodeToSelect","blocks","isLI","isMergeable","shouldInsert","insertedParagraph","lastInsertedBlock","paragraph","firstToAppend","newBlock","insertNewAfter","insertLineBreak","lineBreak","shift","lastNodeText","lastNodeTextLength","pop","modify","alter","granularity","collapse","isIsolated","isKeyboardSelectable","nodeSelection","$createNodeSelection","elementKey","_rootElement","moveNativeSelection","rangeCount","getRangeAt","validNodes","shrinkSelection","firstValidNode","lastValidNode","$swapPoints","forwardDeletion","deleteCharacter","wasCollapsed","$removeSegment","$updateCaretSelectionForUnicodeCharacter","collapseAtStart","deleteLine","anchorIsElement","deleteWord","getCharacterOffset","anchorAndFocus","anchorType","characterOffset","splitLength","segmentOffset","restoreOffset","isLast","join","trim","shouldResolveAncestor","resolvedElement","resolvedOffset","$internalResolveSelectionPoint","resolvedNode","childNodes","childNodesLength","hasBlockCursor","blockCursorElementParent","blockCursorOffset","prototype","indexOf","call","min","getFirstDescendant","resolveSelectionPointOnBoundary","lastAnchor","lastFocus","resolvedAnchorPoint","resolvedFocusPoint","$isBlockElementNode","focusType","$createRangeSelection","$internalCreateSelection","$createRangeSelectionFromDom","eventType","isSelectionChange","useDOMSelection","nodeOffset","times","selectionOffset","newSelectionOffset","max","$updateSelectionResolveTextNodes","firstPointNode","lastPointNode","firstPointOffset","lastPointOffset","childSize","anchorOffsetAtEnd","focusOffsetAtEnd","applySelectionTransforms","updateDOMSelection","tags","nodeCount","anchorDOMNode","focusDOMNode","nextAnchorOffset","nextFocusOffset","nextAnchorNode","nextFocusNode","anchorFormatOrStyleChanged","preventScroll","setBaseAndExtent","console","warn","selectionTarget","Text","createRange","selectNode","$insertNodes","$getTextContent","selection_","$splitNodeAtPoint","insertPoint","newElement","virtualRoot","currentBlock","isLineBreakNode","activeEditorState","activeEditor","isReadOnlyMode","isAttemptingToRecoverFromReconcilerError","infiniteTransformCount","observerOptions","childList","subtree","internalGetActiveEditor","$applyTransforms","transformsCache","transformsArr","transforms","transformsArrLength","$isNodeValidForTransform","$normalizeAllDirtyTextNodes","$applyAllTransforms","untransformedDirtyLeaves","untransformedDirtyLeavesLength","untransformedDirtyElements","untransformedDirtyElementsLength","currentUntransformedDirtyElement","intentionallyMarkedAsDirty","$parseSerializedNode","internalSerializedNode","$parseSerializedNodeImpl","nodeClass","isArray","serializedJSONChildNode","childNode","parseEditorState","serializedEditorState","updateFn","createEmptyEditorState","previousActiveEditorState","previousReadOnlyMode","previousActiveEditor","previousDirtyElements","previousDirtyLeaves","previousCloneNotNeeded","previousDirtyType","handleDEVOnlyPendingUpdateGuarantees","_onError","readEditorState","callbackFn","$commitPendingUpdates","recoveryEditorState","shouldSkipDOM","_headless","currentSelection","pendingSelection","needsUpdate","previouslyUpdating","_updating","disconnect","resetEditor","observe","deferred","_deferred","_editable","triggerMutationListeners","triggerListeners","triggerTextContentListeners","triggerDeferredUpdateCallbacks","$triggerEnqueuedUpdates","currentTextContent","latestTextContent","updateTags","listeners","listenersLength","listener","isCurrentlyEnqueuingUpdates","apply","returnVal","e","commandListeners","_commands","listenerInPriorityOrder","listenersSet","j","queuedUpdates","_updates","queuedUpdate","options","$beginUpdate","processNestedUpdates","initialSkipTransforms","skipTransforms","nextUpdateFn","onUpdate","discrete","editorStateWasCloned","cloneEditorState","_flushSync","startingCompositionKey","endingCompositionKey","pendingNodeMap","shouldUpdate","editorStateHasDirtySelection","ElementNode","getFormatType","getIndent","parentLastChild","getAllTextNodes","textNodes","subChildrenNodes","firstKey","getFirstChildOrThrow","getLastChildOrThrow","getDirection","childrenCount","nodesToAppend","setDirection","setIndent","indentLevel","deleteCount","nodesToInsertLength","oldSize","writableSelfKey","nodesToInsertKeys","nodesToRemoveKeys","nodeAfterRange","nodeBeforeRange","newSize","nodeToDelete","nodeKeyToDelete","writableNodeToDelete","nodeKeyToInsert","writablePrevNode","writableNodeAfterRange","nodesToRemoveKeySet","nodesToInsertKeySet","isPointRemoved","canIndent","excludeFromCopy","destination","canReplaceWith","canInsertAfter","canMergeWith","extractWithChild","DecoratorNode","RootNode","cachedText","$createRootNode","EditorState","exportNodeToJSON","serializedChildren","serializedChildNode","toJSON","ArtificialNode__DO_NOT_USE","hasTextFormat","p","$convertParagraphElement","textAlign","textIndent","textFormat","rangeSelection","parseInt","COMMAND_PRIORITY_EDITOR","COMMAND_PRIORITY_LOW","COMMAND_PRIORITY_NORMAL","COMMAND_PRIORITY_HIGH","COMMAND_PRIORITY_CRITICAL","prevRootElement","nextRootElement","keyNodeMap","initializeConversionCache","additionalConversions","conversionCache","handledConversions","addConversionsToCache","map","keys","currentCache","createEditor","parentEditor","disableEvents","namespace","initialEditorState","onError","html","editable","replaceWithKlass","with","withKlass","hasOwnProperty","proto","method","export","LexicalEditor","import","htmlConversions","textcontent","_htmlConversions","registerUpdateListener","listenerSetOrMap","registerEditableListener","registerDecoratorListener","registerTextContentListener","registerRootListener","registerCommand","commandsMap","listenersInPriorityOrder","String","registerMutationListener","klassToMutate","replaceKlass","registerNodeTransformToKlass","registerNodeTransform","registeredReplaceWithNode","hasNode","hasNodes","bind","getDecorators","setRootElement","userSelect","wordBreak","setEditorState","maybeStringifiedEditorState","JSON","parse","defaultSelection","blur","setEditable","$normalizeSelection__EXPERIMENTAL"],"sources":["C:/Users/BIT1/IdeaProjects/customer-inquiry-system/frontend/node_modules/lexical/Lexical.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createCommand(type) {\n  return {\n    type\n  } ;\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_ANDROID_CHROME = CAN_USE_DOM && IS_ANDROID && IS_CHROME;\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction normalizeClassNames(...classNames) {\n  const rval = [];\n  for (const className of classNames) {\n    if (className && typeof className === 'string') {\n      for (const [s] of className.matchAll(/\\S+/g)) {\n        rval.push(s);\n      }\n    }\n  }\n  return rval;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction $handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            $handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = $getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction $flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet keyCounter = 1;\nfunction resetRandomKey() {\n  keyCounter = 1;\n}\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' &&\n  // @ts-ignore internal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n    if (editor != null) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    {\n      errorOnNodeKeyConstructorMismatch(node, existingKey);\n    }\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction errorOnNodeKeyConstructorMismatch(node, existingKey) {\n  const editorState = internalGetActiveEditorState();\n  if (!editorState) {\n    // tests expect to be able to do this kind of clone without an active editor state\n    return;\n  }\n  const existingNode = editorState._nodeMap.get(existingKey);\n  if (existingNode && existingNode.constructor !== node.constructor) {\n    // Lifted condition to if statement because the inverted logic is a bit confusing\n    if (node.constructor.name !== existingNode.constructor.name) {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with constructor ${existingNode.constructor.name}. Keys must not be re-used when the type is changed.`);\n      }\n    } else {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with different constructor with the same name (possibly due to invalid Hot Module Replacement). Keys must not be re-used when the type is changed.`);\n      }\n    }\n  }\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\n// TODO #6031 this function or their callers have to adjust selection (i.e. insertBefore)\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction $getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  // @ts-ignore We intentionally add this to the Node.\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = $getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  $flushRootMutations(editor);\n}\nfunction $getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() && !node.isComposing() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() && !node.isComposing() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(key, altKey, ctrlKey, metaKey) {\n  return key === 'Tab' && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'b' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'i' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'u' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(key, shiftKey) {\n  return isReturn(key) && !shiftKey;\n}\nfunction isLineBreak(key, shiftKey) {\n  return isReturn(key) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(key, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && key.toLowerCase() === 'o';\n}\nfunction isDeleteWordBackward(key, altKey, ctrlKey) {\n  return isBackspace(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(key, altKey, ctrlKey) {\n  return isDelete(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(key, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(key);\n}\nfunction isDeleteLineForward(key, metaKey) {\n  return IS_APPLE && metaKey && isDelete(key);\n}\nfunction isDeleteBackward(key, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(key) || key.toLowerCase() === 'h' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(key);\n}\nfunction isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(key) || key.toLowerCase() === 'd' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(key);\n}\nfunction isUndo(key, shiftKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'z' && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(key, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return key.toLowerCase() === 'z' && metaKey && shiftKey;\n  }\n  return key.toLowerCase() === 'y' && ctrlKey || key.toLowerCase() === 'z' && ctrlKey && shiftKey;\n}\nfunction isCopy(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'c') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'x') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(key) {\n  return key === 'ArrowLeft';\n}\nfunction isArrowRight(key) {\n  return key === 'ArrowRight';\n}\nfunction isArrowUp(key) {\n  return key === 'ArrowUp';\n}\nfunction isArrowDown(key) {\n  return key === 'ArrowDown';\n}\nfunction isMoveBackward(key, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(key, ctrlKey, altKey, metaKey) {\n  return isArrowRight(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(key, ctrlKey, metaKey) {\n  return isArrowUp(key) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(key, ctrlKey, metaKey) {\n  return isArrowDown(key) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(key) {\n  return key === ' ';\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(key) {\n  return key === 'Enter';\n}\nfunction isBackspace(key) {\n  return key === 'Backspace';\n}\nfunction isEscape(key) {\n  return key === 'Escape';\n}\nfunction isDelete(key) {\n  return key === 'Delete';\n}\nfunction isSelectAll(key, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'a' && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll() {\n  const root = $getRoot();\n  const selection = root.select(0, root.getChildrenSize());\n  $setSelection($normalizeSelection(selection));\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = normalizeClassNames(classNames);\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  // @ts-expect-error\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction $getNodeByKeyOrThrow(key) {\n  const node = $getNodeByKey(key);\n  if (node === null) {\n    {\n      throw Error(`Expected node with key ${key} to exist but it's not in the nodeMap.`);\n    }\n  }\n  return node;\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = normalizeClassNames(blockCursorTheme);\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is an inline node\n */\nfunction isInlineDomNode(node) {\n  const inlineNodes = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var|#text)$/, 'i');\n  return node.nodeName.match(inlineNodes) !== null;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is a block node\n */\nfunction isBlockDomNode(node) {\n  const blockNodes = new RegExp(/^(address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hr|li|main|nav|noscript|ol|p|pre|section|table|td|tfoot|ul|video)$/, 'i');\n  return node.nodeName.match(blockNodes) !== null;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isRootNode(node) || $isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet subTreeTextFormat = null;\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction $createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      $createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction $createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  $createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction $createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    $createNode(children[startIndex], dom, insertDOM);\n    const node = activeNextNodeMap.get(children[startIndex]);\n    if (node !== null && subTreeTextFormat === null && $isTextNode(node)) {\n      subTreeTextFormat = node.getFormat();\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        dom.removeChild(element);\n      }\n\n      // @ts-expect-error: internal field\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br');\n    // @ts-expect-error: internal field\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileParagraphFormat(element) {\n  if ($isParagraphNode(element) && subTreeTextFormat != null && subTreeTextFormat !== element.__textFormat && !activeEditorStateReadOnly) {\n    element.setTextFormat(subTreeTextFormat);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent;\n  // @ts-expect-error: internal field\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = normalizeClassNames(previousDirectionTheme);\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = normalizeClassNames(nextDirectionTheme);\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    // @ts-expect-error: internal field\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    // @ts-expect-error: internal field\n    dom.__lexicalDir = direction;\n  }\n}\nfunction $reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  subTreeTextFormat = null;\n  $reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  reconcileParagraphFormat(nextElement);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n  subTreeTextFormat = null;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction $reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      $reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = $createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n    const nextChildNode = activeNextNodeMap.get(nextFrstChildKey);\n    if (subTreeTextFormat === null && $isTextNode(nextChildNode)) {\n      subTreeTextFormat = nextChildNode.getFormat();\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        $createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction $reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n\n      // @ts-expect-error: internal field\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = $createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      $reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        $createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          $reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n    const node = activeNextNodeMap.get(nextKey);\n    if (node !== null && subTreeTextFormat === null && $isTextNode(node)) {\n      subTreeTextFormat = node.getFormat();\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    $createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction $reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  $reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  // @ts-ignore We intentionally add this to the Node.\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = null;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nconst rootElementsRegistered = new WeakMap();\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            const lastNode = anchor.getNode();\n            if (lastNode instanceof ParagraphNode && lastNode.getChildrenSize() === 0) {\n              selection.format = lastNode.getTextFormat();\n            } else {\n              selection.format = 0;\n            }\n            selection.style = '';\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Tripple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 'MediaLast' && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        const isSelectionAnchorSameAsFocus = selection.anchor.key === selection.focus.key;\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && isSelectionAnchorSameAsFocus) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          // Chromium Android at the moment seems to ignore the preventDefault\n          // on 'deleteContentBackward' and still deletes the content. Which leads\n          // to multiple deletions. So we let the browser handle the deletion in this case.\n          const selectedNodeText = selection.anchor.getNode().getTextContent();\n          const hasSelectedAllTextInNode = selection.anchor.offset === 0 && selection.focus.offset === selectedNodeText.length;\n          const shouldLetBrowserHandleDelete = IS_ANDROID_CHROME && isSelectionAnchorSameAsFocus && !hasSelectedAllTextInNode;\n          if (!shouldLetBrowserHandleDelete) {\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const isBackward = selection.isBackward();\n      const startOffset = isBackward ? selection.anchor.offset : selection.focus.offset;\n      const endOffset = isBackward ? selection.focus.offset : selection.anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, startOffset) + data + anchorNode.getTextContent().slice(startOffset + endOffset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction $onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      $onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.key;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    key,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (key == null) {\n    return;\n  }\n  if (isMoveForward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(key, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(key)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(key, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(key, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(key, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(key)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(key)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(key)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(key, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(key, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(key, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (documentRootElementsCount === undefined || documentRootElementsCount < 1) {\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered.set(doc, (documentRootElementsCount || 0) + 1);\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable() || eventName === 'click') {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      const isEditable = editor.isEditable();\n      switch (eventName) {\n        case 'cut':\n          return isEditable && dispatchCommand(editor, CUT_COMMAND, event);\n        case 'copy':\n          return dispatchCommand(editor, COPY_COMMAND, event);\n        case 'paste':\n          return isEditable && dispatchCommand(editor, PASTE_COMMAND, event);\n        case 'dragstart':\n          return isEditable && dispatchCommand(editor, DRAGSTART_COMMAND, event);\n        case 'dragover':\n          return isEditable && dispatchCommand(editor, DRAGOVER_COMMAND, event);\n        case 'dragend':\n          return isEditable && dispatchCommand(editor, DRAGEND_COMMAND, event);\n        case 'focus':\n          return isEditable && dispatchCommand(editor, FOCUS_COMMAND, event);\n        case 'blur':\n          {\n            return isEditable && dispatchCommand(editor, BLUR_COMMAND, event);\n          }\n        case 'drop':\n          return isEditable && dispatchCommand(editor, DROP_COMMAND, event);\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (!(documentRootElementsCount !== undefined)) {\n    throw Error(`Root element not registered`);\n  } // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const newCount = documentRootElementsCount - 1;\n  if (!(newCount >= 0)) {\n    throw Error(`Root element count less than 0`);\n  }\n  rootElementsRegistered.set(doc, newCount);\n  if (newCount === 0) {\n    doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n  }\n\n  // @ts-expect-error: internal field\n  const editor = rootElement.__lexicalEditor;\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    $removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */\n  //@ts-ignore We set the key in the constructor.\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    if ($isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element' && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) {\n      return false;\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!$isElementNode(node)) {\n          throw Error(`Children of root nodes must be elements`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      if (node === null) {\n        break;\n      }\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        } else {\n          break;\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const constructor = latestNode.constructor;\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      if ($isParagraphNode(latestNode) && $isParagraphNode(mutableNode)) {\n        mutableNode.__textFormat = latestNode.__textFormat;\n      }\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n\n    // @ts-expect-error\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    $removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) {\n      selection = selection.clone();\n    }\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    $removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChild(node)) {\n          return null;\n        }\n        return {\n          conversion: $convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction $convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChild(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n/** @noInheritDoc */\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: $convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!(element !== null && isHTMLElement(element))) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.toggleUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  const style = span.style;\n  return {\n    forChild: applyTextFormatFromStyle(style),\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: applyTextFormatFromStyle(b.style, hasNormalFontWeight ? undefined : 'bold'),\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction $convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && !isInlineDomNode(node) || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: applyTextFormatFromStyle(domNode.style, format),\n    node: null\n  };\n}\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\nfunction applyTextFormatFromStyle(style, shouldApply) {\n  const fontWeight = style.fontWeight;\n  const textDecoration = style.textDecoration.split(' ');\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = fontWeight === '700' || fontWeight === 'bold';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = textDecoration.includes('line-through');\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = textDecoration.includes('underline');\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = style.verticalAlign;\n  return lexicalNode => {\n    if (!$isTextNode(lexicalNode)) {\n      return lexicalNode;\n    }\n    if (hasBoldFontWeight && !lexicalNode.hasFormat('bold')) {\n      lexicalNode.toggleFormat('bold');\n    }\n    if (hasLinethroughTextDecoration && !lexicalNode.hasFormat('strikethrough')) {\n      lexicalNode.toggleFormat('strikethrough');\n    }\n    if (hasItalicFontStyle && !lexicalNode.hasFormat('italic')) {\n      lexicalNode.toggleFormat('italic');\n    }\n    if (hasUnderlineTextDecoration && !lexicalNode.hasFormat('underline')) {\n      lexicalNode.toggleFormat('underline');\n    }\n    if (verticalAlign === 'sub' && !lexicalNode.hasFormat('subscript')) {\n      lexicalNode.toggleFormat('subscript');\n    }\n    if (verticalAlign === 'super' && !lexicalNode.hasFormat('superscript')) {\n      lexicalNode.toggleFormat('superscript');\n    }\n    if (shouldApply && !lexicalNode.hasFormat(shouldApply)) {\n      lexicalNode.toggleFormat(shouldApply);\n    }\n    return lexicalNode;\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    const newNode = new TabNode(node.__key);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    newNode.__text = node.__text;\n    newNode.__format = node.__format;\n    newNode.__style = node.__style;\n    return newNode;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tab',\n      version: 1\n    };\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = $internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection as a new\n   * Lexical TextNode, according to a series of insertion heuristics based on the selection type and position.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const format = this.format;\n    const style = this.style;\n    let firstPoint = anchor;\n    let endPoint = focus;\n    if (!this.isCollapsed() && focus.isBefore(anchor)) {\n      firstPoint = focus;\n      endPoint = anchor;\n    }\n    if (firstPoint.type === 'element') {\n      $transferStartingElementPointToTextPoint(firstPoint, endPoint, format, style);\n    }\n    const startOffset = firstPoint.offset;\n    let endOffset = endPoint.offset;\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (selectedNodesLength === 1 && endPoint.type === 'element') {\n      endOffset = firstNodeTextLength;\n      endPoint.set(firstPoint.key, endOffset, 'text');\n    }\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        nextSibling.setStyle(style);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        $normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    this.insertText('');\n  }\n\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   */\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected or it is token, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize() && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n      textNode.setFormat(nextFormat);\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accomodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstBlock = $getAncestor(firstPoint.getNode(), INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ('__language' in firstBlock && $isElementNode(firstBlock)) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = $removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      const index = $removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isLI = node => '__value' in node && '__checked' in node;\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || isLI(firstBlock));\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (isLI(insertedParagraph) || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = $removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be an ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  /**\n   * Helper for handling forward character and word deletion that prevents element nodes\n   * like a table, columns layout being destroyed\n   *\n   * @param anchor the anchor\n   * @param anchorNode the anchor node in the selection\n   * @param isBackward whether or not selection is backwards\n   */\n  forwardDeletion(anchor, anchorNode, isBackward) {\n    if (!isBackward && (\n    // Delete forward handle case\n    anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n      const parent = anchorNode.getParent();\n      const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n      if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      let anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n\n      // Handle the deletion around decorators.\n      const focus = this.focus;\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      // Since `domSelection.modify('extend', ..., 'lineboundary')` works well for text selections\n      // but doesn't properly handle selections which end on elements, a space character is added\n      // for such selections transforming their anchor's type to 'text'\n      const anchorIsElement = this.anchor.type === 'element';\n      if (anchorIsElement) {\n        this.insertText(' ');\n      }\n      this.modify('extend', isBackward, 'lineboundary');\n\n      // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n\n      // Adjusts selection to include an extra character added for element anchors to remove it\n      if (anchorIsElement) {\n        const startPoint = isBackward ? this.anchor : this.focus;\n        startPoint.set(startPoint.key, startPoint.offset + 1, startPoint.type);\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction $internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    const blockCursorElement = editor._blockCursorElement;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (blockCursorElement !== null) {\n      const blockCursorElementParent = blockCursorElement.parentNode;\n      if (dom === blockCursorElementParent) {\n        const blockCursorOffset = Array.prototype.indexOf.call(blockCursorElementParent.children, blockCursorElement);\n        if (offset > blockCursorOffset) {\n          resolvedOffset--;\n        }\n      }\n    }\n    resolvedNode = $getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = $getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        resolvedOffset = Math.min(resolvedElement.getChildrenSize(), resolvedOffset);\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n          resolvedOffset = 0;\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && $getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = $getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction $normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = $internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = $internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = $getNodeFromDOM(anchorDOM);\n    const focusNode = $getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  $normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction $internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction $internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return $internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction $createRangeSelectionFromDom(domSelection, editor) {\n  return $internalCreateRangeSelection(null, domSelection, editor, null);\n}\nfunction $internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n    {\n      console.warn(error);\n    }\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction $removeTextAndSplitBlock(selection) {\n  let selection_ = selection;\n  if (!selection.isCollapsed()) {\n    selection_.removeText();\n  }\n  // A new selection can originate as a result of node replacement, in which case is registered via\n  // $setSelection\n  const newSelection = $getSelection();\n  if ($isRangeSelection(newSelection)) {\n    selection_ = newSelection;\n  }\n  if (!$isRangeSelection(selection_)) {\n    throw Error(`Unexpected dirty selection to be null`);\n  }\n  const anchor = selection_.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = $splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction $splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction internalGetActiveEditorState() {\n  return activeEditorState;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction $commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = $reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        $commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  $triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction $triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      $beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction $beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = $internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    $commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      $commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        $commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    $beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while ($isElementNode(node)) {\n      const child = node.getFirstChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while ($isElementNode(node)) {\n      const child = node.getLastChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  /** @deprecated @internal */\n  canReplaceWith(replacement) {\n    return true;\n  }\n  /** @deprecated @internal */\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  /** @deprecated @internal */\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/** @noInheritDoc */\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...nodesToAppend);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// TODO: Cleanup ArtificialNode__DO_NOT_USE #5966\nclass ArtificialNode__DO_NOT_USE extends ElementNode {\n  static getType() {\n    return 'artificial';\n  }\n  createDOM(config) {\n    // this isnt supposed to be used and is not used anywhere but defining it to appease the API\n    const dom = document.createElement('div');\n    return dom;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__textFormat = 0;\n  }\n  static getType() {\n    return 'paragraph';\n  }\n  getTextFormat() {\n    const self = this.getLatest();\n    return self.__textFormat;\n  }\n  setTextFormat(type) {\n    const self = this.getWritable();\n    self.__textFormat = type;\n    return self;\n  }\n  hasTextFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getTextFormat() & formatFlag) !== 0;\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: $convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    node.setTextFormat(serializedNode.textFormat);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      textFormat: this.getTextFormat(),\n      type: 'paragraph',\n      version: 1\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(rangeSelection, restoreSelection) {\n    const newElement = $createParagraphNode();\n    newElement.setTextFormat(rangeSelection.format);\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    newElement.setFormat(this.getFormatType());\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction $convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM.call(node.klass);\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ArtificialNode__DO_NOT_USE, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods and replaceWithKlass is instance of base klass.\n      {\n        // ArtificialNode__DO_NOT_USE can get renamed, so we use the type\n        const nodeType = Object.prototype.hasOwnProperty.call(klass, 'getType') && klass.getType();\n        const name = klass.name;\n        if (replaceWithKlass) {\n          if (!(replaceWithKlass.prototype instanceof klass)) {\n            throw Error(`${replaceWithKlass.name} doesn't extend the ${name}`);\n          }\n        }\n        if (name !== 'RootNode' && nodeType !== 'root' && nodeType !== 'artificial') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener) {\n    let registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    let klassToMutate = klass;\n    let replaceKlass = null;\n    while (replaceKlass = registeredNode.replaceWithKlass) {\n      klassToMutate = replaceKlass;\n      registeredNode = this._nodes.get(replaceKlass.getType());\n      if (registeredNode === undefined) {\n        {\n          throw Error(`Node ${replaceKlass.name} has not been registered. Ensure node has been passed to createEditor.`);\n        }\n      }\n    }\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klassToMutate);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const type = klass.getType();\n    const registeredNode = this._nodes.get(type);\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        $commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    $flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      $commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    $commitPendingUpdates(this);\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\n\nexport { $addUpdateTag, $applyNodeReplacement, $copyNode, $createLineBreakNode, $createNodeSelection, $createParagraphNode, $createPoint, $createRangeSelection, $createRangeSelectionFromDom, $createTabNode, $createTextNode, $getAdjacentNode, $getCharacterOffsets, $getEditor, $getNearestNodeFromDOMNode, $getNearestRootOrShadowRoot, $getNodeByKey, $getNodeByKeyOrThrow, $getPreviousSelection, $getRoot, $getSelection, $getTextContent, $hasAncestor, $hasUpdateTag, $insertNodes, $isBlockElementNode, $isDecoratorNode, $isElementNode, $isInlineElementOrDecoratorNode, $isLeafNode, $isLineBreakNode, $isNodeSelection, $isParagraphNode, $isRangeSelection, $isRootNode, $isRootOrShadowRoot, $isTabNode, $isTextNode, $nodesOfType, $normalizeSelection as $normalizeSelection__EXPERIMENTAL, $parseSerializedNode, $selectAll, $setCompositionKey, $setSelection, $splitNode, ArtificialNode__DO_NOT_USE, BLUR_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CLICK_COMMAND, COMMAND_PRIORITY_CRITICAL, COMMAND_PRIORITY_EDITOR, COMMAND_PRIORITY_HIGH, COMMAND_PRIORITY_LOW, COMMAND_PRIORITY_NORMAL, CONTROLLED_TEXT_INSERTION_COMMAND, COPY_COMMAND, CUT_COMMAND, DELETE_CHARACTER_COMMAND, DELETE_LINE_COMMAND, DELETE_WORD_COMMAND, DRAGEND_COMMAND, DRAGOVER_COMMAND, DRAGSTART_COMMAND, DROP_COMMAND, DecoratorNode, ElementNode, FOCUS_COMMAND, FORMAT_ELEMENT_COMMAND, FORMAT_TEXT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, IS_ALL_FORMATTING, IS_BOLD, IS_CODE, IS_HIGHLIGHT, IS_ITALIC, IS_STRIKETHROUGH, IS_SUBSCRIPT, IS_SUPERSCRIPT, IS_UNDERLINE, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_ARROW_UP_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, KEY_DOWN_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, KEY_MODIFIER_COMMAND, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, LineBreakNode, MOVE_TO_END, MOVE_TO_START, OUTDENT_CONTENT_COMMAND, PASTE_COMMAND, ParagraphNode, REDO_COMMAND, REMOVE_TEXT_COMMAND, RootNode, SELECTION_CHANGE_COMMAND, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, SELECT_ALL_COMMAND, TEXT_TYPE_TO_FORMAT, TabNode, TextNode, UNDO_COMMAND, createCommand, createEditor, getNearestEditorFromDOMNode, isBlockDomNode, isCurrentlyReadOnlyMode, isHTMLAnchorElement, isHTMLElement, isInlineDomNode, isSelectionCapturedInDecoratorInput, isSelectionWithinEditor, resetRandomKey };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}