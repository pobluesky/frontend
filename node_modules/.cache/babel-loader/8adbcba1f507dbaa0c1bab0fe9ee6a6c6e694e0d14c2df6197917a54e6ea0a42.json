{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $generateHtmlFromNodes } from '@lexical/html';\nimport { $isLinkNode } from '@lexical/link';\nimport { $isMarkNode } from '@lexical/mark';\nimport { $isTableSelection } from '@lexical/table';\nimport { $getSelection, $getRoot, $isRangeSelection, $isNodeSelection, $isElementNode, $isTextNode, $isParagraphNode, COMMAND_PRIORITY_CRITICAL } from 'lexical';\nimport { forwardRef, useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { jsxs, jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst NON_SINGLE_WIDTH_CHARS_REPLACEMENT = Object.freeze({\n  '\\t': '\\\\t',\n  '\\n': '\\\\n'\n});\nconst NON_SINGLE_WIDTH_CHARS_REGEX = new RegExp(Object.keys(NON_SINGLE_WIDTH_CHARS_REPLACEMENT).join('|'), 'g');\nconst SYMBOLS = Object.freeze({\n  ancestorHasNextSibling: '|',\n  ancestorIsLastChild: ' ',\n  hasNextSibling: '├',\n  isLastChild: '└',\n  selectedChar: '^',\n  selectedLine: '>'\n});\nconst FORMAT_PREDICATES = [node => node.hasFormat('bold') && 'Bold', node => node.hasFormat('code') && 'Code', node => node.hasFormat('italic') && 'Italic', node => node.hasFormat('strikethrough') && 'Strikethrough', node => node.hasFormat('subscript') && 'Subscript', node => node.hasFormat('superscript') && 'Superscript', node => node.hasFormat('underline') && 'Underline'];\nconst FORMAT_PREDICATES_PARAGRAPH = [node => node.hasTextFormat('bold') && 'Bold', node => node.hasTextFormat('code') && 'Code', node => node.hasTextFormat('italic') && 'Italic', node => node.hasTextFormat('strikethrough') && 'Strikethrough', node => node.hasTextFormat('subscript') && 'Subscript', node => node.hasTextFormat('superscript') && 'Superscript', node => node.hasTextFormat('underline') && 'Underline'];\nconst DETAIL_PREDICATES = [node => node.isDirectionless() && 'Directionless', node => node.isUnmergeable() && 'Unmergeable'];\nconst MODE_PREDICATES = [node => node.isToken() && 'Token', node => node.isSegmented() && 'Segmented'];\nfunction generateContent(editor, commandsLog, exportDOM, customPrintNode, obfuscateText = false) {\n  const editorState = editor.getEditorState();\n  const editorConfig = editor._config;\n  const compositionKey = editor._compositionKey;\n  const editable = editor._editable;\n  if (exportDOM) {\n    let htmlString = '';\n    editorState.read(() => {\n      htmlString = printPrettyHTML($generateHtmlFromNodes(editor));\n    });\n    return htmlString;\n  }\n  let res = ' root\\n';\n  const selectionString = editorState.read(() => {\n    const selection = $getSelection();\n    visitTree($getRoot(), (node, indent) => {\n      const nodeKey = node.getKey();\n      const nodeKeyDisplay = `(${nodeKey})`;\n      const typeDisplay = node.getType() || '';\n      const isSelected = node.isSelected();\n      res += `${isSelected ? SYMBOLS.selectedLine : ' '} ${indent.join(' ')} ${nodeKeyDisplay} ${typeDisplay} ${printNode(node, customPrintNode, obfuscateText)}\\n`;\n      res += $printSelectedCharsLine({\n        indent,\n        isSelected,\n        node,\n        nodeKeyDisplay,\n        selection,\n        typeDisplay\n      });\n    });\n    return selection === null ? ': null' : $isRangeSelection(selection) ? printRangeSelection(selection) : $isTableSelection(selection) ? printTableSelection(selection) : printNodeSelection(selection);\n  });\n  res += '\\n selection' + selectionString;\n  res += '\\n\\n commands:';\n  if (commandsLog.length) {\n    for (const {\n      index,\n      type,\n      payload\n    } of commandsLog) {\n      res += `\\n  └ ${index}. { type: ${type}, payload: ${payload instanceof Event ? payload.constructor.name : payload} }`;\n    }\n  } else {\n    res += '\\n  └ None dispatched.';\n  }\n  res += '\\n\\n editor:';\n  res += `\\n  └ namespace ${editorConfig.namespace}`;\n  if (compositionKey !== null) {\n    res += `\\n  └ compositionKey ${compositionKey}`;\n  }\n  res += `\\n  └ editable ${String(editable)}`;\n  return res;\n}\nfunction printRangeSelection(selection) {\n  let res = '';\n  const formatText = printFormatProperties(selection);\n  res += `: range ${formatText !== '' ? `{ ${formatText} }` : ''} ${selection.style !== '' ? `{ style: ${selection.style} } ` : ''}`;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorOffset = anchor.offset;\n  const focusOffset = focus.offset;\n  res += `\\n  ├ anchor { key: ${anchor.key}, offset: ${anchorOffset === null ? 'null' : anchorOffset}, type: ${anchor.type} }`;\n  res += `\\n  └ focus { key: ${focus.key}, offset: ${focusOffset === null ? 'null' : focusOffset}, type: ${focus.type} }`;\n  return res;\n}\nfunction printNodeSelection(selection) {\n  if (!$isNodeSelection(selection)) {\n    return '';\n  }\n  return `: node\\n  └ [${Array.from(selection._nodes).join(', ')}]`;\n}\nfunction printTableSelection(selection) {\n  return `: table\\n  └ { table: ${selection.tableKey}, anchorCell: ${selection.anchor.key}, focusCell: ${selection.focus.key} }`;\n}\nfunction visitTree(currentNode, visitor, indent = []) {\n  const childNodes = currentNode.getChildren();\n  const childNodesLength = childNodes.length;\n  childNodes.forEach((childNode, i) => {\n    visitor(childNode, indent.concat(i === childNodesLength - 1 ? SYMBOLS.isLastChild : SYMBOLS.hasNextSibling));\n    if ($isElementNode(childNode)) {\n      visitTree(childNode, visitor, indent.concat(i === childNodesLength - 1 ? SYMBOLS.ancestorIsLastChild : SYMBOLS.ancestorHasNextSibling));\n    }\n  });\n}\nfunction normalize(text, obfuscateText = false) {\n  const textToPrint = Object.entries(NON_SINGLE_WIDTH_CHARS_REPLACEMENT).reduce((acc, [key, value]) => acc.replace(new RegExp(key, 'g'), String(value)), text);\n  if (obfuscateText) {\n    return textToPrint.replace(/[^\\s]/g, '*');\n  }\n  return textToPrint;\n}\nfunction printNode(node, customPrintNode, obfuscateText = false) {\n  const customPrint = customPrintNode ? customPrintNode(node, obfuscateText) : undefined;\n  if (customPrint !== undefined && customPrint.length > 0) {\n    return customPrint;\n  }\n  if ($isTextNode(node)) {\n    const text = node.getTextContent();\n    const title = text.length === 0 ? '(empty)' : `\"${normalize(text, obfuscateText)}\"`;\n    const properties = printAllTextNodeProperties(node);\n    return [title, properties.length !== 0 ? `{ ${properties} }` : null].filter(Boolean).join(' ').trim();\n  } else if ($isLinkNode(node)) {\n    const link = node.getURL();\n    const title = link.length === 0 ? '(empty)' : `\"${normalize(link, obfuscateText)}\"`;\n    const properties = printAllLinkNodeProperties(node);\n    return [title, properties.length !== 0 ? `{ ${properties} }` : null].filter(Boolean).join(' ').trim();\n  } else if ($isMarkNode(node)) {\n    return `ids: [ ${node.getIDs().join(', ')} ]`;\n  } else if ($isParagraphNode(node)) {\n    const formatText = printTextFormatProperties(node);\n    return formatText !== '' ? `{ ${formatText} }` : '';\n  } else {\n    return '';\n  }\n}\nfunction printTextFormatProperties(nodeOrSelection) {\n  let str = FORMAT_PREDICATES_PARAGRAPH.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'format: ' + str;\n  }\n  return str;\n}\nfunction printAllTextNodeProperties(node) {\n  return [printFormatProperties(node), printDetailProperties(node), printModeProperties(node)].filter(Boolean).join(', ');\n}\nfunction printAllLinkNodeProperties(node) {\n  return [printTargetProperties(node), printRelProperties(node), printTitleProperties(node)].filter(Boolean).join(', ');\n}\nfunction printDetailProperties(nodeOrSelection) {\n  let str = DETAIL_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'detail: ' + str;\n  }\n  return str;\n}\nfunction printModeProperties(nodeOrSelection) {\n  let str = MODE_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'mode: ' + str;\n  }\n  return str;\n}\nfunction printFormatProperties(nodeOrSelection) {\n  let str = FORMAT_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'format: ' + str;\n  }\n  return str;\n}\nfunction printTargetProperties(node) {\n  let str = node.getTarget();\n  // TODO Fix nullish on LinkNode\n  if (str != null) {\n    str = 'target: ' + str;\n  }\n  return str;\n}\nfunction printRelProperties(node) {\n  let str = node.getRel();\n  // TODO Fix nullish on LinkNode\n  if (str != null) {\n    str = 'rel: ' + str;\n  }\n  return str;\n}\nfunction printTitleProperties(node) {\n  let str = node.getTitle();\n  // TODO Fix nullish on LinkNode\n  if (str != null) {\n    str = 'title: ' + str;\n  }\n  return str;\n}\nfunction $printSelectedCharsLine({\n  indent,\n  isSelected,\n  node,\n  nodeKeyDisplay,\n  selection,\n  typeDisplay\n}) {\n  // No selection or node is not selected.\n  if (!$isTextNode(node) || !$isRangeSelection(selection) || !isSelected || $isElementNode(node)) {\n    return '';\n  }\n\n  // No selected characters.\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  if (node.getTextContent() === '' || anchor.getNode() === selection.focus.getNode() && anchor.offset === focus.offset) {\n    return '';\n  }\n  const [start, end] = $getSelectionStartEnd(node, selection);\n  if (start === end) {\n    return '';\n  }\n  const selectionLastIndent = indent[indent.length - 1] === SYMBOLS.hasNextSibling ? SYMBOLS.ancestorHasNextSibling : SYMBOLS.ancestorIsLastChild;\n  const indentionChars = [...indent.slice(0, indent.length - 1), selectionLastIndent];\n  const unselectedChars = Array(start + 1).fill(' ');\n  const selectedChars = Array(end - start).fill(SYMBOLS.selectedChar);\n  const paddingLength = typeDisplay.length + 2; // 1 for the space after + 1 for the double quote.\n\n  const nodePrintSpaces = Array(nodeKeyDisplay.length + paddingLength).fill(' ');\n  return [SYMBOLS.selectedLine, indentionChars.join(' '), [...nodePrintSpaces, ...unselectedChars, ...selectedChars].join('')].join(' ') + '\\n';\n}\nfunction printPrettyHTML(str) {\n  const div = document.createElement('div');\n  div.innerHTML = str.trim();\n  return prettifyHTML(div, 0).innerHTML;\n}\nfunction prettifyHTML(node, level) {\n  const indentBefore = new Array(level++ + 1).join('  ');\n  const indentAfter = new Array(level - 1).join('  ');\n  let textNode;\n  for (let i = 0; i < node.children.length; i++) {\n    textNode = document.createTextNode('\\n' + indentBefore);\n    node.insertBefore(textNode, node.children[i]);\n    prettifyHTML(node.children[i], level);\n    if (node.lastElementChild === node.children[i]) {\n      textNode = document.createTextNode('\\n' + indentAfter);\n      node.appendChild(textNode);\n    }\n  }\n  return node;\n}\nfunction $getSelectionStartEnd(node, selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if ($isNodeSelection(selection) || anchorAndFocus === null) {\n    return [-1, -1];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  const textContent = node.getTextContent();\n  const textLength = textContent.length;\n  let start = -1;\n  let end = -1;\n\n  // Only one node is being selected.\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (anchorNode === focusNode && node === anchorNode && anchor.offset !== focus.offset) {\n      [start, end] = anchor.offset < focus.offset ? [anchor.offset, focus.offset] : [focus.offset, anchor.offset];\n    } else if (node === anchorNode) {\n      [start, end] = anchorNode.isBefore(focusNode) ? [anchor.offset, textLength] : [0, anchor.offset];\n    } else if (node === focusNode) {\n      [start, end] = focusNode.isBefore(anchorNode) ? [focus.offset, textLength] : [0, focus.offset];\n    } else {\n      // Node is within selection but not the anchor nor focus.\n      [start, end] = [0, textLength];\n    }\n  }\n\n  // Account for non-single width characters.\n  const numNonSingleWidthCharBeforeSelection = (textContent.slice(0, start).match(NON_SINGLE_WIDTH_CHARS_REGEX) || []).length;\n  const numNonSingleWidthCharInSelection = (textContent.slice(start, end).match(NON_SINGLE_WIDTH_CHARS_REGEX) || []).length;\n  return [start + numNonSingleWidthCharBeforeSelection, end + numNonSingleWidthCharBeforeSelection + numNonSingleWidthCharInSelection];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst LARGE_EDITOR_STATE_SIZE = 1000;\nconst TreeView = /*#__PURE__*/forwardRef(function TreeViewWrapped({\n  treeTypeButtonClassName,\n  timeTravelButtonClassName,\n  timeTravelPanelSliderClassName,\n  timeTravelPanelButtonClassName,\n  viewClassName,\n  timeTravelPanelClassName,\n  editorState,\n  setEditorState,\n  setEditorReadOnly,\n  generateContent\n}, ref) {\n  const [timeStampedEditorStates, setTimeStampedEditorStates] = useState([]);\n  const [content, setContent] = useState('');\n  const [timeTravelEnabled, setTimeTravelEnabled] = useState(false);\n  const [showExportDOM, setShowExportDOM] = useState(false);\n  const playingIndexRef = useRef(0);\n  const inputRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLimited, setIsLimited] = useState(false);\n  const [showLimited, setShowLimited] = useState(false);\n  const lastEditorStateRef = useRef();\n  const lastGenerationID = useRef(0);\n  const generateTree = useCallback(exportDOM => {\n    const myID = ++lastGenerationID.current;\n    generateContent(exportDOM).then(treeText => {\n      if (myID === lastGenerationID.current) {\n        setContent(treeText);\n      }\n    }).catch(err => {\n      if (myID === lastGenerationID.current) {\n        setContent(`Error rendering tree: ${err.message}\\n\\nStack:\\n${err.stack}`);\n      }\n    });\n  }, [generateContent]);\n  useEffect(() => {\n    if (!showLimited && editorState._nodeMap.size > LARGE_EDITOR_STATE_SIZE) {\n      setIsLimited(true);\n      if (!showLimited) {\n        return;\n      }\n    }\n\n    // Prevent re-rendering if the editor state hasn't changed\n    if (lastEditorStateRef.current !== editorState) {\n      lastEditorStateRef.current = editorState;\n      generateTree(showExportDOM);\n      if (!timeTravelEnabled) {\n        setTimeStampedEditorStates(currentEditorStates => [...currentEditorStates, [Date.now(), editorState]]);\n      }\n    }\n  }, [editorState, generateTree, showExportDOM, showLimited, timeTravelEnabled]);\n  const totalEditorStates = timeStampedEditorStates.length;\n  useEffect(() => {\n    if (isPlaying) {\n      let timeoutId;\n      const play = () => {\n        const currentIndex = playingIndexRef.current;\n        if (currentIndex === totalEditorStates - 1) {\n          setIsPlaying(false);\n          return;\n        }\n        const currentTime = timeStampedEditorStates[currentIndex][0];\n        const nextTime = timeStampedEditorStates[currentIndex + 1][0];\n        const timeDiff = nextTime - currentTime;\n        timeoutId = setTimeout(() => {\n          playingIndexRef.current++;\n          const index = playingIndexRef.current;\n          const input = inputRef.current;\n          if (input !== null) {\n            input.value = String(index);\n          }\n          setEditorState(timeStampedEditorStates[index][1]);\n          play();\n        }, timeDiff);\n      };\n      play();\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n  }, [timeStampedEditorStates, isPlaying, totalEditorStates, setEditorState]);\n  const handleExportModeToggleClick = () => {\n    generateTree(!showExportDOM);\n    setShowExportDOM(!showExportDOM);\n  };\n  return /*#__PURE__*/jsxs(\"div\", {\n    className: viewClassName,\n    children: [!showLimited && isLimited ? /*#__PURE__*/jsxs(\"div\", {\n      style: {\n        padding: 20\n      },\n      children: [/*#__PURE__*/jsx(\"span\", {\n        style: {\n          marginRight: 20\n        },\n        children: \"Detected large EditorState, this can impact debugging performance.\"\n      }), /*#__PURE__*/jsx(\"button\", {\n        onClick: () => {\n          setShowLimited(true);\n        },\n        style: {\n          background: 'transparent',\n          border: '1px solid white',\n          color: 'white',\n          cursor: 'pointer',\n          padding: 5\n        },\n        children: \"Show full tree\"\n      })]\n    }) : null, !showLimited ? /*#__PURE__*/jsx(\"button\", {\n      onClick: () => handleExportModeToggleClick(),\n      className: treeTypeButtonClassName,\n      type: \"button\",\n      children: showExportDOM ? 'Tree' : 'Export DOM'\n    }) : null, !timeTravelEnabled && (showLimited || !isLimited) && totalEditorStates > 2 && /*#__PURE__*/jsx(\"button\", {\n      onClick: () => {\n        setEditorReadOnly(true);\n        playingIndexRef.current = totalEditorStates - 1;\n        setTimeTravelEnabled(true);\n      },\n      className: timeTravelButtonClassName,\n      type: \"button\",\n      children: \"Time Travel\"\n    }), (showLimited || !isLimited) && /*#__PURE__*/jsx(\"pre\", {\n      ref: ref,\n      children: content\n    }), timeTravelEnabled && (showLimited || !isLimited) && /*#__PURE__*/jsxs(\"div\", {\n      className: timeTravelPanelClassName,\n      children: [/*#__PURE__*/jsx(\"button\", {\n        className: timeTravelPanelButtonClassName,\n        onClick: () => {\n          if (playingIndexRef.current === totalEditorStates - 1) {\n            playingIndexRef.current = 1;\n          }\n          setIsPlaying(!isPlaying);\n        },\n        type: \"button\",\n        children: isPlaying ? 'Pause' : 'Play'\n      }), /*#__PURE__*/jsx(\"input\", {\n        className: timeTravelPanelSliderClassName,\n        ref: inputRef,\n        onChange: event => {\n          const editorStateIndex = Number(event.target.value);\n          const timeStampedEditorState = timeStampedEditorStates[editorStateIndex];\n          if (timeStampedEditorState) {\n            playingIndexRef.current = editorStateIndex;\n            setEditorState(timeStampedEditorState[1]);\n          }\n        },\n        type: \"range\",\n        min: \"1\",\n        max: totalEditorStates - 1\n      }), /*#__PURE__*/jsx(\"button\", {\n        className: timeTravelPanelButtonClassName,\n        onClick: () => {\n          setEditorReadOnly(false);\n          const index = timeStampedEditorStates.length - 1;\n          const timeStampedEditorState = timeStampedEditorStates[index];\n          setEditorState(timeStampedEditorState[1]);\n          const input = inputRef.current;\n          if (input !== null) {\n            input.value = String(index);\n          }\n          setTimeTravelEnabled(false);\n          setIsPlaying(false);\n        },\n        type: \"button\",\n        children: \"Exit\"\n      })]\n    })]\n  });\n});\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerLexicalCommandLogger(editor, setLoggedCommands) {\n  const unregisterCommandListeners = new Set();\n  let i = 0;\n  for (const [command] of editor._commands) {\n    unregisterCommandListeners.add(editor.registerCommand(command, payload => {\n      setLoggedCommands(state => {\n        i += 1;\n        const newState = [...state];\n        newState.push({\n          index: i,\n          payload,\n          type: command.type ? command.type : 'UNKNOWN'\n        });\n        if (newState.length > 10) {\n          newState.shift();\n        }\n        return newState;\n      });\n      return false;\n    }, COMMAND_PRIORITY_CRITICAL));\n  }\n  return () => unregisterCommandListeners.forEach(unregister => unregister());\n}\nfunction useLexicalCommandsLog(editor) {\n  const [loggedCommands, setLoggedCommands] = useState([]);\n  useEffect(() => {\n    return registerLexicalCommandLogger(editor, setLoggedCommands);\n  }, [editor]);\n  return useMemo(() => loggedCommands, [loggedCommands]);\n}\nexport { TreeView, generateContent, registerLexicalCommandLogger, useLexicalCommandsLog };","map":{"version":3,"names":["$generateHtmlFromNodes","$isLinkNode","$isMarkNode","$isTableSelection","$getSelection","$getRoot","$isRangeSelection","$isNodeSelection","$isElementNode","$isTextNode","$isParagraphNode","COMMAND_PRIORITY_CRITICAL","forwardRef","useState","useRef","useCallback","useEffect","useMemo","jsxs","jsx","NON_SINGLE_WIDTH_CHARS_REPLACEMENT","Object","freeze","NON_SINGLE_WIDTH_CHARS_REGEX","RegExp","keys","join","SYMBOLS","ancestorHasNextSibling","ancestorIsLastChild","hasNextSibling","isLastChild","selectedChar","selectedLine","FORMAT_PREDICATES","node","hasFormat","FORMAT_PREDICATES_PARAGRAPH","hasTextFormat","DETAIL_PREDICATES","isDirectionless","isUnmergeable","MODE_PREDICATES","isToken","isSegmented","generateContent","editor","commandsLog","exportDOM","customPrintNode","obfuscateText","editorState","getEditorState","editorConfig","_config","compositionKey","_compositionKey","editable","_editable","htmlString","read","printPrettyHTML","res","selectionString","selection","visitTree","indent","nodeKey","getKey","nodeKeyDisplay","typeDisplay","getType","isSelected","printNode","$printSelectedCharsLine","printRangeSelection","printTableSelection","printNodeSelection","length","index","type","payload","Event","constructor","name","namespace","String","formatText","printFormatProperties","style","anchor","focus","anchorOffset","offset","focusOffset","key","Array","from","_nodes","tableKey","currentNode","visitor","childNodes","getChildren","childNodesLength","forEach","childNode","i","concat","normalize","text","textToPrint","entries","reduce","acc","value","replace","customPrint","undefined","getTextContent","title","properties","printAllTextNodeProperties","filter","Boolean","trim","link","getURL","printAllLinkNodeProperties","getIDs","printTextFormatProperties","nodeOrSelection","str","map","predicate","toLocaleLowerCase","printDetailProperties","printModeProperties","printTargetProperties","printRelProperties","printTitleProperties","getTarget","getRel","getTitle","getNode","start","end","$getSelectionStartEnd","selectionLastIndent","indentionChars","slice","unselectedChars","fill","selectedChars","paddingLength","nodePrintSpaces","div","document","createElement","innerHTML","prettifyHTML","level","indentBefore","indentAfter","textNode","children","createTextNode","insertBefore","lastElementChild","appendChild","anchorAndFocus","getStartEndPoints","textContent","textLength","anchorNode","focusNode","isBefore","numNonSingleWidthCharBeforeSelection","match","numNonSingleWidthCharInSelection","LARGE_EDITOR_STATE_SIZE","TreeView","TreeViewWrapped","treeTypeButtonClassName","timeTravelButtonClassName","timeTravelPanelSliderClassName","timeTravelPanelButtonClassName","viewClassName","timeTravelPanelClassName","setEditorState","setEditorReadOnly","ref","timeStampedEditorStates","setTimeStampedEditorStates","content","setContent","timeTravelEnabled","setTimeTravelEnabled","showExportDOM","setShowExportDOM","playingIndexRef","inputRef","isPlaying","setIsPlaying","isLimited","setIsLimited","showLimited","setShowLimited","lastEditorStateRef","lastGenerationID","generateTree","myID","current","then","treeText","catch","err","message","stack","_nodeMap","size","currentEditorStates","Date","now","totalEditorStates","timeoutId","play","currentIndex","currentTime","nextTime","timeDiff","setTimeout","input","clearTimeout","handleExportModeToggleClick","className","padding","marginRight","onClick","background","border","color","cursor","onChange","event","editorStateIndex","Number","target","timeStampedEditorState","min","max","registerLexicalCommandLogger","setLoggedCommands","unregisterCommandListeners","Set","command","_commands","add","registerCommand","state","newState","push","shift","unregister","useLexicalCommandsLog","loggedCommands"],"sources":["C:/Users/BIT1/IdeaProjects/customer-inquiry-system/frontend/node_modules/@lexical/devtools-core/LexicalDevtoolsCore.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $generateHtmlFromNodes } from '@lexical/html';\nimport { $isLinkNode } from '@lexical/link';\nimport { $isMarkNode } from '@lexical/mark';\nimport { $isTableSelection } from '@lexical/table';\nimport { $getSelection, $getRoot, $isRangeSelection, $isNodeSelection, $isElementNode, $isTextNode, $isParagraphNode, COMMAND_PRIORITY_CRITICAL } from 'lexical';\nimport { forwardRef, useState, useRef, useCallback, useEffect, useMemo } from 'react';\nimport { jsxs, jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst NON_SINGLE_WIDTH_CHARS_REPLACEMENT = Object.freeze({\n  '\\t': '\\\\t',\n  '\\n': '\\\\n'\n});\nconst NON_SINGLE_WIDTH_CHARS_REGEX = new RegExp(Object.keys(NON_SINGLE_WIDTH_CHARS_REPLACEMENT).join('|'), 'g');\nconst SYMBOLS = Object.freeze({\n  ancestorHasNextSibling: '|',\n  ancestorIsLastChild: ' ',\n  hasNextSibling: '├',\n  isLastChild: '└',\n  selectedChar: '^',\n  selectedLine: '>'\n});\nconst FORMAT_PREDICATES = [node => node.hasFormat('bold') && 'Bold', node => node.hasFormat('code') && 'Code', node => node.hasFormat('italic') && 'Italic', node => node.hasFormat('strikethrough') && 'Strikethrough', node => node.hasFormat('subscript') && 'Subscript', node => node.hasFormat('superscript') && 'Superscript', node => node.hasFormat('underline') && 'Underline'];\nconst FORMAT_PREDICATES_PARAGRAPH = [node => node.hasTextFormat('bold') && 'Bold', node => node.hasTextFormat('code') && 'Code', node => node.hasTextFormat('italic') && 'Italic', node => node.hasTextFormat('strikethrough') && 'Strikethrough', node => node.hasTextFormat('subscript') && 'Subscript', node => node.hasTextFormat('superscript') && 'Superscript', node => node.hasTextFormat('underline') && 'Underline'];\nconst DETAIL_PREDICATES = [node => node.isDirectionless() && 'Directionless', node => node.isUnmergeable() && 'Unmergeable'];\nconst MODE_PREDICATES = [node => node.isToken() && 'Token', node => node.isSegmented() && 'Segmented'];\nfunction generateContent(editor, commandsLog, exportDOM, customPrintNode, obfuscateText = false) {\n  const editorState = editor.getEditorState();\n  const editorConfig = editor._config;\n  const compositionKey = editor._compositionKey;\n  const editable = editor._editable;\n  if (exportDOM) {\n    let htmlString = '';\n    editorState.read(() => {\n      htmlString = printPrettyHTML($generateHtmlFromNodes(editor));\n    });\n    return htmlString;\n  }\n  let res = ' root\\n';\n  const selectionString = editorState.read(() => {\n    const selection = $getSelection();\n    visitTree($getRoot(), (node, indent) => {\n      const nodeKey = node.getKey();\n      const nodeKeyDisplay = `(${nodeKey})`;\n      const typeDisplay = node.getType() || '';\n      const isSelected = node.isSelected();\n      res += `${isSelected ? SYMBOLS.selectedLine : ' '} ${indent.join(' ')} ${nodeKeyDisplay} ${typeDisplay} ${printNode(node, customPrintNode, obfuscateText)}\\n`;\n      res += $printSelectedCharsLine({\n        indent,\n        isSelected,\n        node,\n        nodeKeyDisplay,\n        selection,\n        typeDisplay\n      });\n    });\n    return selection === null ? ': null' : $isRangeSelection(selection) ? printRangeSelection(selection) : $isTableSelection(selection) ? printTableSelection(selection) : printNodeSelection(selection);\n  });\n  res += '\\n selection' + selectionString;\n  res += '\\n\\n commands:';\n  if (commandsLog.length) {\n    for (const {\n      index,\n      type,\n      payload\n    } of commandsLog) {\n      res += `\\n  └ ${index}. { type: ${type}, payload: ${payload instanceof Event ? payload.constructor.name : payload} }`;\n    }\n  } else {\n    res += '\\n  └ None dispatched.';\n  }\n  res += '\\n\\n editor:';\n  res += `\\n  └ namespace ${editorConfig.namespace}`;\n  if (compositionKey !== null) {\n    res += `\\n  └ compositionKey ${compositionKey}`;\n  }\n  res += `\\n  └ editable ${String(editable)}`;\n  return res;\n}\nfunction printRangeSelection(selection) {\n  let res = '';\n  const formatText = printFormatProperties(selection);\n  res += `: range ${formatText !== '' ? `{ ${formatText} }` : ''} ${selection.style !== '' ? `{ style: ${selection.style} } ` : ''}`;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorOffset = anchor.offset;\n  const focusOffset = focus.offset;\n  res += `\\n  ├ anchor { key: ${anchor.key}, offset: ${anchorOffset === null ? 'null' : anchorOffset}, type: ${anchor.type} }`;\n  res += `\\n  └ focus { key: ${focus.key}, offset: ${focusOffset === null ? 'null' : focusOffset}, type: ${focus.type} }`;\n  return res;\n}\nfunction printNodeSelection(selection) {\n  if (!$isNodeSelection(selection)) {\n    return '';\n  }\n  return `: node\\n  └ [${Array.from(selection._nodes).join(', ')}]`;\n}\nfunction printTableSelection(selection) {\n  return `: table\\n  └ { table: ${selection.tableKey}, anchorCell: ${selection.anchor.key}, focusCell: ${selection.focus.key} }`;\n}\nfunction visitTree(currentNode, visitor, indent = []) {\n  const childNodes = currentNode.getChildren();\n  const childNodesLength = childNodes.length;\n  childNodes.forEach((childNode, i) => {\n    visitor(childNode, indent.concat(i === childNodesLength - 1 ? SYMBOLS.isLastChild : SYMBOLS.hasNextSibling));\n    if ($isElementNode(childNode)) {\n      visitTree(childNode, visitor, indent.concat(i === childNodesLength - 1 ? SYMBOLS.ancestorIsLastChild : SYMBOLS.ancestorHasNextSibling));\n    }\n  });\n}\nfunction normalize(text, obfuscateText = false) {\n  const textToPrint = Object.entries(NON_SINGLE_WIDTH_CHARS_REPLACEMENT).reduce((acc, [key, value]) => acc.replace(new RegExp(key, 'g'), String(value)), text);\n  if (obfuscateText) {\n    return textToPrint.replace(/[^\\s]/g, '*');\n  }\n  return textToPrint;\n}\nfunction printNode(node, customPrintNode, obfuscateText = false) {\n  const customPrint = customPrintNode ? customPrintNode(node, obfuscateText) : undefined;\n  if (customPrint !== undefined && customPrint.length > 0) {\n    return customPrint;\n  }\n  if ($isTextNode(node)) {\n    const text = node.getTextContent();\n    const title = text.length === 0 ? '(empty)' : `\"${normalize(text, obfuscateText)}\"`;\n    const properties = printAllTextNodeProperties(node);\n    return [title, properties.length !== 0 ? `{ ${properties} }` : null].filter(Boolean).join(' ').trim();\n  } else if ($isLinkNode(node)) {\n    const link = node.getURL();\n    const title = link.length === 0 ? '(empty)' : `\"${normalize(link, obfuscateText)}\"`;\n    const properties = printAllLinkNodeProperties(node);\n    return [title, properties.length !== 0 ? `{ ${properties} }` : null].filter(Boolean).join(' ').trim();\n  } else if ($isMarkNode(node)) {\n    return `ids: [ ${node.getIDs().join(', ')} ]`;\n  } else if ($isParagraphNode(node)) {\n    const formatText = printTextFormatProperties(node);\n    return formatText !== '' ? `{ ${formatText} }` : '';\n  } else {\n    return '';\n  }\n}\nfunction printTextFormatProperties(nodeOrSelection) {\n  let str = FORMAT_PREDICATES_PARAGRAPH.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'format: ' + str;\n  }\n  return str;\n}\nfunction printAllTextNodeProperties(node) {\n  return [printFormatProperties(node), printDetailProperties(node), printModeProperties(node)].filter(Boolean).join(', ');\n}\nfunction printAllLinkNodeProperties(node) {\n  return [printTargetProperties(node), printRelProperties(node), printTitleProperties(node)].filter(Boolean).join(', ');\n}\nfunction printDetailProperties(nodeOrSelection) {\n  let str = DETAIL_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'detail: ' + str;\n  }\n  return str;\n}\nfunction printModeProperties(nodeOrSelection) {\n  let str = MODE_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'mode: ' + str;\n  }\n  return str;\n}\nfunction printFormatProperties(nodeOrSelection) {\n  let str = FORMAT_PREDICATES.map(predicate => predicate(nodeOrSelection)).filter(Boolean).join(', ').toLocaleLowerCase();\n  if (str !== '') {\n    str = 'format: ' + str;\n  }\n  return str;\n}\nfunction printTargetProperties(node) {\n  let str = node.getTarget();\n  // TODO Fix nullish on LinkNode\n  if (str != null) {\n    str = 'target: ' + str;\n  }\n  return str;\n}\nfunction printRelProperties(node) {\n  let str = node.getRel();\n  // TODO Fix nullish on LinkNode\n  if (str != null) {\n    str = 'rel: ' + str;\n  }\n  return str;\n}\nfunction printTitleProperties(node) {\n  let str = node.getTitle();\n  // TODO Fix nullish on LinkNode\n  if (str != null) {\n    str = 'title: ' + str;\n  }\n  return str;\n}\nfunction $printSelectedCharsLine({\n  indent,\n  isSelected,\n  node,\n  nodeKeyDisplay,\n  selection,\n  typeDisplay\n}) {\n  // No selection or node is not selected.\n  if (!$isTextNode(node) || !$isRangeSelection(selection) || !isSelected || $isElementNode(node)) {\n    return '';\n  }\n\n  // No selected characters.\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  if (node.getTextContent() === '' || anchor.getNode() === selection.focus.getNode() && anchor.offset === focus.offset) {\n    return '';\n  }\n  const [start, end] = $getSelectionStartEnd(node, selection);\n  if (start === end) {\n    return '';\n  }\n  const selectionLastIndent = indent[indent.length - 1] === SYMBOLS.hasNextSibling ? SYMBOLS.ancestorHasNextSibling : SYMBOLS.ancestorIsLastChild;\n  const indentionChars = [...indent.slice(0, indent.length - 1), selectionLastIndent];\n  const unselectedChars = Array(start + 1).fill(' ');\n  const selectedChars = Array(end - start).fill(SYMBOLS.selectedChar);\n  const paddingLength = typeDisplay.length + 2; // 1 for the space after + 1 for the double quote.\n\n  const nodePrintSpaces = Array(nodeKeyDisplay.length + paddingLength).fill(' ');\n  return [SYMBOLS.selectedLine, indentionChars.join(' '), [...nodePrintSpaces, ...unselectedChars, ...selectedChars].join('')].join(' ') + '\\n';\n}\nfunction printPrettyHTML(str) {\n  const div = document.createElement('div');\n  div.innerHTML = str.trim();\n  return prettifyHTML(div, 0).innerHTML;\n}\nfunction prettifyHTML(node, level) {\n  const indentBefore = new Array(level++ + 1).join('  ');\n  const indentAfter = new Array(level - 1).join('  ');\n  let textNode;\n  for (let i = 0; i < node.children.length; i++) {\n    textNode = document.createTextNode('\\n' + indentBefore);\n    node.insertBefore(textNode, node.children[i]);\n    prettifyHTML(node.children[i], level);\n    if (node.lastElementChild === node.children[i]) {\n      textNode = document.createTextNode('\\n' + indentAfter);\n      node.appendChild(textNode);\n    }\n  }\n  return node;\n}\nfunction $getSelectionStartEnd(node, selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if ($isNodeSelection(selection) || anchorAndFocus === null) {\n    return [-1, -1];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  const textContent = node.getTextContent();\n  const textLength = textContent.length;\n  let start = -1;\n  let end = -1;\n\n  // Only one node is being selected.\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (anchorNode === focusNode && node === anchorNode && anchor.offset !== focus.offset) {\n      [start, end] = anchor.offset < focus.offset ? [anchor.offset, focus.offset] : [focus.offset, anchor.offset];\n    } else if (node === anchorNode) {\n      [start, end] = anchorNode.isBefore(focusNode) ? [anchor.offset, textLength] : [0, anchor.offset];\n    } else if (node === focusNode) {\n      [start, end] = focusNode.isBefore(anchorNode) ? [focus.offset, textLength] : [0, focus.offset];\n    } else {\n      // Node is within selection but not the anchor nor focus.\n      [start, end] = [0, textLength];\n    }\n  }\n\n  // Account for non-single width characters.\n  const numNonSingleWidthCharBeforeSelection = (textContent.slice(0, start).match(NON_SINGLE_WIDTH_CHARS_REGEX) || []).length;\n  const numNonSingleWidthCharInSelection = (textContent.slice(start, end).match(NON_SINGLE_WIDTH_CHARS_REGEX) || []).length;\n  return [start + numNonSingleWidthCharBeforeSelection, end + numNonSingleWidthCharBeforeSelection + numNonSingleWidthCharInSelection];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst LARGE_EDITOR_STATE_SIZE = 1000;\nconst TreeView = /*#__PURE__*/forwardRef(function TreeViewWrapped({\n  treeTypeButtonClassName,\n  timeTravelButtonClassName,\n  timeTravelPanelSliderClassName,\n  timeTravelPanelButtonClassName,\n  viewClassName,\n  timeTravelPanelClassName,\n  editorState,\n  setEditorState,\n  setEditorReadOnly,\n  generateContent\n}, ref) {\n  const [timeStampedEditorStates, setTimeStampedEditorStates] = useState([]);\n  const [content, setContent] = useState('');\n  const [timeTravelEnabled, setTimeTravelEnabled] = useState(false);\n  const [showExportDOM, setShowExportDOM] = useState(false);\n  const playingIndexRef = useRef(0);\n  const inputRef = useRef(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLimited, setIsLimited] = useState(false);\n  const [showLimited, setShowLimited] = useState(false);\n  const lastEditorStateRef = useRef();\n  const lastGenerationID = useRef(0);\n  const generateTree = useCallback(exportDOM => {\n    const myID = ++lastGenerationID.current;\n    generateContent(exportDOM).then(treeText => {\n      if (myID === lastGenerationID.current) {\n        setContent(treeText);\n      }\n    }).catch(err => {\n      if (myID === lastGenerationID.current) {\n        setContent(`Error rendering tree: ${err.message}\\n\\nStack:\\n${err.stack}`);\n      }\n    });\n  }, [generateContent]);\n  useEffect(() => {\n    if (!showLimited && editorState._nodeMap.size > LARGE_EDITOR_STATE_SIZE) {\n      setIsLimited(true);\n      if (!showLimited) {\n        return;\n      }\n    }\n\n    // Prevent re-rendering if the editor state hasn't changed\n    if (lastEditorStateRef.current !== editorState) {\n      lastEditorStateRef.current = editorState;\n      generateTree(showExportDOM);\n      if (!timeTravelEnabled) {\n        setTimeStampedEditorStates(currentEditorStates => [...currentEditorStates, [Date.now(), editorState]]);\n      }\n    }\n  }, [editorState, generateTree, showExportDOM, showLimited, timeTravelEnabled]);\n  const totalEditorStates = timeStampedEditorStates.length;\n  useEffect(() => {\n    if (isPlaying) {\n      let timeoutId;\n      const play = () => {\n        const currentIndex = playingIndexRef.current;\n        if (currentIndex === totalEditorStates - 1) {\n          setIsPlaying(false);\n          return;\n        }\n        const currentTime = timeStampedEditorStates[currentIndex][0];\n        const nextTime = timeStampedEditorStates[currentIndex + 1][0];\n        const timeDiff = nextTime - currentTime;\n        timeoutId = setTimeout(() => {\n          playingIndexRef.current++;\n          const index = playingIndexRef.current;\n          const input = inputRef.current;\n          if (input !== null) {\n            input.value = String(index);\n          }\n          setEditorState(timeStampedEditorStates[index][1]);\n          play();\n        }, timeDiff);\n      };\n      play();\n      return () => {\n        clearTimeout(timeoutId);\n      };\n    }\n  }, [timeStampedEditorStates, isPlaying, totalEditorStates, setEditorState]);\n  const handleExportModeToggleClick = () => {\n    generateTree(!showExportDOM);\n    setShowExportDOM(!showExportDOM);\n  };\n  return /*#__PURE__*/jsxs(\"div\", {\n    className: viewClassName,\n    children: [!showLimited && isLimited ? /*#__PURE__*/jsxs(\"div\", {\n      style: {\n        padding: 20\n      },\n      children: [/*#__PURE__*/jsx(\"span\", {\n        style: {\n          marginRight: 20\n        },\n        children: \"Detected large EditorState, this can impact debugging performance.\"\n      }), /*#__PURE__*/jsx(\"button\", {\n        onClick: () => {\n          setShowLimited(true);\n        },\n        style: {\n          background: 'transparent',\n          border: '1px solid white',\n          color: 'white',\n          cursor: 'pointer',\n          padding: 5\n        },\n        children: \"Show full tree\"\n      })]\n    }) : null, !showLimited ? /*#__PURE__*/jsx(\"button\", {\n      onClick: () => handleExportModeToggleClick(),\n      className: treeTypeButtonClassName,\n      type: \"button\",\n      children: showExportDOM ? 'Tree' : 'Export DOM'\n    }) : null, !timeTravelEnabled && (showLimited || !isLimited) && totalEditorStates > 2 && /*#__PURE__*/jsx(\"button\", {\n      onClick: () => {\n        setEditorReadOnly(true);\n        playingIndexRef.current = totalEditorStates - 1;\n        setTimeTravelEnabled(true);\n      },\n      className: timeTravelButtonClassName,\n      type: \"button\",\n      children: \"Time Travel\"\n    }), (showLimited || !isLimited) && /*#__PURE__*/jsx(\"pre\", {\n      ref: ref,\n      children: content\n    }), timeTravelEnabled && (showLimited || !isLimited) && /*#__PURE__*/jsxs(\"div\", {\n      className: timeTravelPanelClassName,\n      children: [/*#__PURE__*/jsx(\"button\", {\n        className: timeTravelPanelButtonClassName,\n        onClick: () => {\n          if (playingIndexRef.current === totalEditorStates - 1) {\n            playingIndexRef.current = 1;\n          }\n          setIsPlaying(!isPlaying);\n        },\n        type: \"button\",\n        children: isPlaying ? 'Pause' : 'Play'\n      }), /*#__PURE__*/jsx(\"input\", {\n        className: timeTravelPanelSliderClassName,\n        ref: inputRef,\n        onChange: event => {\n          const editorStateIndex = Number(event.target.value);\n          const timeStampedEditorState = timeStampedEditorStates[editorStateIndex];\n          if (timeStampedEditorState) {\n            playingIndexRef.current = editorStateIndex;\n            setEditorState(timeStampedEditorState[1]);\n          }\n        },\n        type: \"range\",\n        min: \"1\",\n        max: totalEditorStates - 1\n      }), /*#__PURE__*/jsx(\"button\", {\n        className: timeTravelPanelButtonClassName,\n        onClick: () => {\n          setEditorReadOnly(false);\n          const index = timeStampedEditorStates.length - 1;\n          const timeStampedEditorState = timeStampedEditorStates[index];\n          setEditorState(timeStampedEditorState[1]);\n          const input = inputRef.current;\n          if (input !== null) {\n            input.value = String(index);\n          }\n          setTimeTravelEnabled(false);\n          setIsPlaying(false);\n        },\n        type: \"button\",\n        children: \"Exit\"\n      })]\n    })]\n  });\n});\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction registerLexicalCommandLogger(editor, setLoggedCommands) {\n  const unregisterCommandListeners = new Set();\n  let i = 0;\n  for (const [command] of editor._commands) {\n    unregisterCommandListeners.add(editor.registerCommand(command, payload => {\n      setLoggedCommands(state => {\n        i += 1;\n        const newState = [...state];\n        newState.push({\n          index: i,\n          payload,\n          type: command.type ? command.type : 'UNKNOWN'\n        });\n        if (newState.length > 10) {\n          newState.shift();\n        }\n        return newState;\n      });\n      return false;\n    }, COMMAND_PRIORITY_CRITICAL));\n  }\n  return () => unregisterCommandListeners.forEach(unregister => unregister());\n}\nfunction useLexicalCommandsLog(editor) {\n  const [loggedCommands, setLoggedCommands] = useState([]);\n  useEffect(() => {\n    return registerLexicalCommandLogger(editor, setLoggedCommands);\n  }, [editor]);\n  return useMemo(() => loggedCommands, [loggedCommands]);\n}\n\nexport { TreeView, generateContent, registerLexicalCommandLogger, useLexicalCommandsLog };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}