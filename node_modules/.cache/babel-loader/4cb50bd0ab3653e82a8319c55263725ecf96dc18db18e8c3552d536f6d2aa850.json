{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { mergeRegister } from '@lexical/utils';\nimport { UNDO_COMMAND, COMMAND_PRIORITY_EDITOR, REDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, $isRangeSelection, $isTextNode, $isRootNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !$isRootNode(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!$isRangeSelection(nextSelection) || !$isRangeSelection(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  }\n\n  // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && $isTextNode(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!$isTextNode(prevDirtyNode) || !$isTextNode(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n  if ($isRangeSelection(prevSelection) && $isRangeSelection(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n  if (!isDeletingLine && $isTextNode(prevNode) && $isTextNode(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now();\n\n    // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      }\n\n      // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current\n        });\n        editor.dispatchCommand(CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    }\n\n    // Else we merge\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregister = mergeRegister(editor.registerCommand(UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(CAN_UNDO_COMMAND, false);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  return unregister;\n}\n\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\nexport { createEmptyHistoryState, registerHistory };","map":{"version":3,"names":["mergeRegister","UNDO_COMMAND","COMMAND_PRIORITY_EDITOR","REDO_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","CAN_REDO_COMMAND","CAN_UNDO_COMMAND","$isRangeSelection","$isTextNode","$isRootNode","HISTORY_MERGE","HISTORY_PUSH","DISCARD_HISTORY_CANDIDATE","OTHER","COMPOSING_CHARACTER","INSERT_CHARACTER_AFTER_SELECTION","DELETE_CHARACTER_BEFORE_SELECTION","DELETE_CHARACTER_AFTER_SELECTION","getDirtyNodes","editorState","dirtyLeaves","dirtyElements","nodeMap","_nodeMap","nodes","dirtyLeafKey","dirtyLeaf","get","undefined","push","dirtyElementKey","intentionallyMarkedAsDirty","dirtyElement","getChangeType","prevEditorState","nextEditorState","dirtyLeavesSet","dirtyElementsSet","isComposing","size","nextSelection","_selection","prevSelection","isCollapsed","dirtyNodes","length","nextNodeMap","nextAnchorNode","anchor","key","prevAnchorNode","has","__key","__text","offset","nextDirtyNode","prevDirtyNode","__mode","prevText","nextText","nextAnchor","prevAnchor","type","nextAnchorOffset","prevAnchorOffset","textDiff","isTextNodeUnchanged","prevNode","nextNode","isDeletingLine","focus","__type","__detail","__style","__format","__parent","createMergeActionGetter","editor","delay","prevChangeTime","Date","now","prevChangeType","currentHistoryEntry","tags","changeTime","changeType","mergeAction","isSameEditor","shouldPushHistory","shouldMergeHistory","selection","hasDirtyNodes","Array","from","redo","historyState","redoStack","undoStack","current","dispatchCommand","historyStateEntry","pop","setEditorState","tag","undo","undoStackLength","clearHistory","registerHistory","getMergeAction","applyChange","currentEditorState","unregister","registerCommand","registerUpdateListener","createEmptyHistoryState"],"sources":["C:/Users/BIT1/IdeaProjects/customer-inquiry-system/frontend/node_modules/@lexical/history/LexicalHistory.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { mergeRegister } from '@lexical/utils';\nimport { UNDO_COMMAND, COMMAND_PRIORITY_EDITOR, REDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, $isRangeSelection, $isTextNode, $isRootNode } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !$isRootNode(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!$isRangeSelection(nextSelection) || !$isRangeSelection(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  }\n\n  // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && $isTextNode(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!$isTextNode(prevDirtyNode) || !$isTextNode(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n  if ($isRangeSelection(prevSelection) && $isRangeSelection(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n  if (!isDeletingLine && $isTextNode(prevNode) && $isTextNode(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now();\n\n    // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      }\n\n      // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current\n        });\n        editor.dispatchCommand(CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    }\n\n    // Else we merge\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregister = mergeRegister(editor.registerCommand(UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(CAN_UNDO_COMMAND, false);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  return unregister;\n}\n\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\nexport { createEmptyHistoryState, registerHistory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}